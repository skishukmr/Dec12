/*
    Copyright (c) 1996-2013 Ariba, Inc.
    All rights reserved. Patents pending.

    Rules file.

    Generated on Thu Sep 26 15:17:18 CDT 2013

    Do not edit this file!
*/
{
    Chains = (
        {
            Classname = "ariba.approvable.rules.JavaScriptChainRule";
            Condition = "function supervisorChain_condition (ir, ar)\r\n{\r\n    var type = ar.getType();\r\n    var approver = ar.getApprover();\r\n    Log.javascript.debug(\"SC ::: In Supervisory Chain Rule... \");\r\n    Log.javascript.debug(\"SC ::: approver: \" + approver.getUniqueName());\r\n    Log.javascript.debug(\"SC ::: type: \" + type);\r\n    if ((isType(type,\"Supervisor\") || \r\n        isType(type,\"Supervisory Chain\")) && \r\n        (approver instanceof User)) {\r\n        var partuser = CommonUser.getPartitionedUser(approver, ir.getPartition());\r\n        if(partuser == null){\r\n           return false;\r\n           }\r\n        var eac = partuser.getFieldValue(\"SAPExpenseApprovalCode\");\r\n        Log.javascript.debug(\"SC ::: approval code: \" + eac);\r\n        if (eac == null) {\r\n           return false;\r\n        }\r\n        var limit = eac.getFieldValue(\"Amount\");\r\n        Log.javascript.debug(\"SC ::: limit: \" + limit);\r\n        if (limit == null) {\r\n           return false;\r\n        }\r\n        var total = CatCSVIRRulesUtil.getCumulativeAmount(ir, false);\r\n        Log.javascript.debug(\"SC ::: limit/total: \" + limit + \"/\" + total);\r\n        //var accumulatedTotalTax = CatCSVIRRulesUtil.getCumulativeAmount(ir, true);\r\n//Remove the Tax check for 0.00\r\n/*       if (accumulatedTotalTax == null || accumulatedTotalTax == 0.0000000000) {\r\n            return false;\r\n        } */\r\n//if(accumulatedTotalTax == null)\r\n//{\r\n//accumulatedTotalTax == 0.0000000000;\r\n//}\r\n//        Log.javascript.debug(\"SC ::: AccumulatedTax: \" + accumulatedTotalTax);\r\n//        var totalInvoiceAmountLessTax = total.subtract(accumulatedTotalTax);\r\n//        Log.javascript.debug(\"SC ::: TotalLessTax: \" + totalInvoiceAmountLessTax);\r\n\r\n Log.javascript.debug(\"SC ::: Limitcomapredto tatal: \" + limit.compareTo(total));\r\n\r\n        if (limit.compareTo(total) < 0) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\t\t\t\t\r\nsupervisorChain_condition;";
            Enabled = true;
            Name = "Supervisory Chain";
            Permission = RuleEditor;
            Result = "function supervisorChain_action (ir, ar)\r\n{\r\n   Log.javascript.debug(\"SC ::: Entering Supervisory Chain\");\r\n   var approver = null;\r\n   var reason = null;\r\n   var required = true;\r\n   var supervisor = User2Supervisor(ar.getApprover());\r\n   if (supervisor instanceof User) {\r\n      Log.javascript.debug(\"SC ::: supervisor: \" + supervisor);\r\n      approver = supervisor;\r\n      reason = \"Chain_Supervisor\";\r\n   }\r\n   return ApprovalRequest.create(ir,\r\n                                 approver,\r\n                                 required,\r\n                                 \"cat.rulereasons\",\r\n                                 reason);\r\n}\r\nsupervisorChain_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptChainRule";
            Condition = "function supervisorChain_condition (ir, ar)\r\n{\r\n    var type = ar.getType();\r\n    var approver = ar.getApprover();\r\n    Log.javascript.debug(\"SC ::: In Supervisory Chain Rule... \");\r\n    Log.javascript.debug(\"SC ::: approver: \" + approver.getUniqueName());\r\n    Log.javascript.debug(\"SC ::: type: \" + type);\r\n    if ((isType(type,\"Supervisor\") || \r\n        isType(type,\"Supervisory Chain\")) && \r\n        (approver instanceof User)) {\r\n        var eac = approver.getFieldValue(\"ExpenseApprovalCode\");\r\n        Log.javascript.debug(\"SC ::: approval code: \" + eac);\r\n        if (eac == null) {\r\n           return false;\r\n        }\r\n        var limit = getUserExpenseLimitBD(eac);\r\n        Log.javascript.debug(\"SC ::: limit: \" + limit);\r\n        if (limit == null) {\r\n           return false;\r\n        }\r\n        var total = CatCSVIRRulesUtil.getCumulativeAmount(ir, false);\r\n        Log.javascript.debug(\"SC ::: limit/total: \" + limit + \"/\" + total);\r\n        var accumulatedTotalTax = CatCSVIRRulesUtil.getCumulativeAmount(ir, true);\r\n        if (accumulatedTotalTax == null) {\r\n            return false;\r\n        }\r\n        Log.javascript.debug(\"SC ::: AccumulatedTax: \" + accumulatedTotalTax);\r\n        var totalInvoiceAmountLessTax = total.subtract(accumulatedTotalTax);\r\n        Log.javascript.debug(\"SC ::: TotalLessTax: \" + totalInvoiceAmountLessTax);\r\n        if (limit.compareTo(totalInvoiceAmountLessTax) < 0) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\t\t\t\t\r\nsupervisorChain_condition;";
            Enabled = false;
            Name = "Copy of Supervisory Chain";
            Permission = RuleEditor;
            Result = "function supervisorChain_action (ir, ar)\r\n{\r\n   Log.javascript.debug(\"SC ::: Entering Supervisory Chain\");\r\n   var approver = null;\r\n   var reason = null;\r\n   var required = true;\r\n   var supervisor = User2Supervisor(ar.getApprover());\r\n   if (supervisor instanceof User) {\r\n      Log.javascript.debug(\"SC ::: supervisor: \" + supervisor);\r\n      approver = supervisor;\r\n      reason = \"Chain_Supervisor\";\r\n   }\r\n   return ApprovalRequest.create(ir,\r\n                                 approver,\r\n                                 required,\r\n                                 \"cat.rulereasons\",\r\n                                 reason);\r\n}\r\nsupervisorChain_action;";
        }
    );
    Classname = ariba.approvable.rules.RuleSet;
    Constraints = (
        {
            After = "Custom Tax Approver";
            Before = "Invoice Manager";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "Invoice Manager Before CustomTaxApprover";
            Permission = RuleEditor;
        },
        {
            ApprovalRequestType = "Invoice Custom Tax Approver";
            Classname = ariba.approvable.rules.LastConstraint;
            Enabled = true;
            Name = "Custom Tax Approver Last";
            Permission = RuleEditor;
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptConstraint";
            Condition = "function supervisory_chain_constraint (left, right)\r\n{\r\n   Log.javascript.debug(\"SCC ::: Entering Supervisory Chain Constraint\");\r\n   var lt = left.getType();\r\n   var rt = right.getType();\r\n\r\n   if (isType(lt, \"CAT CSV Exception Handler\") && \r\n      isType(rt, \"Supervisor\")) {\r\n      Log.javascript.debug(\"SCC ::: CAT CSV Exception Handler / Supervisor\");\r\n      return true;\r\n   }\t\r\n   if (isType(lt, \"Supervisor\") && \r\n      isType(rt, \"Supervisory Chain\")) {\r\n      Log.javascript.debug(\"SCC ::: Supervisor / Supervisory Chain\");\t\t\r\n      return true;\r\n   }\t\t\r\n   if (isType(lt,\"Supervisory Chain\") && \r\n      isType(rt,\"Supervisory Chain\")) {\r\n      Log.javascript.debug(\"SCC ::: Supervisory Chain\");\r\n      return (User2Supervisor(left.getApprover()) == right.getApprover()); \r\n   }\t\r\n   return false;\r\n}\r\nsupervisory_chain_constraint;";
            Enabled = true;
            Name = "Supervisory Chain Constraint";
            Permission = RuleEditor;
        },
        {
            ApprovalRequestType = "Always Add Linda";
            Classname = ariba.approvable.rules.FirstConstraint;
            Enabled = true;
            Name = "Always Add Linda First";
            Permission = RuleEditor;
        },
        {
            After = "Settlement Code Approver";
            Before = "Always Add Linda";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "Linda Before SettlementCodeApprover ";
            Permission = RuleEditor;
        },
        {
            After = "CAT CSV Exception Handler";
            Before = "Always Add Linda";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "Linda Before ExceptionHandler";
            Permission = RuleEditor;
        },
        {
            After = Supervisor;
            Before = "Always Add Linda";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "Linda Before Supervisor";
            Permission = RuleEditor;
        },
        {
            After = "Invoice Manager";
            Before = Linda;
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "Linda Before Invoice Manager";
            Permission = RuleEditor;
        },
        {
            After = "Custom Tax Approver";
            Before = "Always Add Linda";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "Linda Before CustomTaxApprover";
            Permission = RuleEditor;
        },
        {
            After = "CAT CSV Exception Handler";
            Before = "Settlement Code Approver";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "SettlementCodeApprover Before ExceptionHandler";
            Permission = RuleEditor;
        },
        {
            After = Supervisor;
            Before = "Settlement Code Approver";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "SettlementCodeApprover Before Supervisor";
            Permission = RuleEditor;
        },
        {
            After = "Invoice Manager";
            Before = SettlementCodeApprover;
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "SettlementCodeApprover Before Invoice Manager";
            Permission = RuleEditor;
        },
        {
            After = "Custom Tax Approver";
            Before = "Settlement Code Approver";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "SettlementCodeApprover Before CustomTaxApprover";
            Permission = RuleEditor;
        },
        {
            After = "Invoice Manager";
            Before = ExceptionHandler;
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "ExceptionHandler Before Invoice Manager";
            Permission = RuleEditor;
        },
        {
            After = "Custom Tax Approver";
            Before = "CAT CSV Exception Handler";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "ExceptionHandler Before CustomTaxApprover";
            Permission = RuleEditor;
        },
        {
            After = "Invoice Manager";
            Before = Supervisor;
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "Supervisor Before Invoice Manager";
            Permission = RuleEditor;
        },
        {
            After = "Custom Tax Approver";
            Before = Supervisor;
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "Supervisor Before CustomTaxApprover";
            Permission = RuleEditor;
        },
        {
            After = "Invoice Manager";
            Before = "Data Maintainer";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "Data Maintainer Before Invoice Manager";
            Permission = RuleEditor;
        },
        {
            After = "Custom Tax Approver";
            Before = "IR Error Handler (Data Maintainer)";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "Data Maintainer Before CustomTaxApprover";
            Permission = RuleEditor;
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptConstraint";
            Condition = "function foreignShipments_constraint(left, right)\r\n{\r\n\tvar arLeft=0;\r\n\tvar arRight=0;\r\n\tLog.javascript.debug(\"FS constraint rule\");\r\n\tLog.javascript.debug(\"Left rule : \" +left.getType());\r\n\tLog.javascript.debug(\"Right rule : \" +right.getType());\r\n\tif(left!=null && left.getType().equals(\"foreignShipments\")){\r\n\t\tarLeft = getRulePriority(left);\r\n\t\tLog.javascript.debug(\"FS on LHS\");\r\n\t}\t\r\n\tLog.javascript.debug(\"Checking right.\");\r\n\tif(right != null && right.getType().equals(\"foreignShipments\")){\r\n\t\tarRight = getRulePriority(right);\r\n\t\tLog.javascript.debug(\"FS on RHS\");\r\n\t}\t\r\n\tLog.javascript.debug(\"Rule priority: Left: \"+arLeft + \", Right: \" +arRight);\r\n\tif(arLeft==1 && left.getType().equals(\"foreignShipments\")){\r\n\t\tLog.javascript.debug(\"Foriegn shipment First\");\r\n\t\treturn left.getType().equals(\"foreignShipments\");\r\n\t}\r\n\telse if(arRight==2 && right.getType().equals(\"foreignShipments\") && !left.getType().equals(\"eInvoiceApprover\")){\r\n\t\tLog.javascript.debug(\"Foriegn shipment right\");\r\n\t\treturn right.getType().equals(\"foreignShipments\");\t\r\n\t}\r\n\tLog.javascript.debug(\"Right :\" + right.getType());\r\n\tLog.javascript.debug(\"Left :\"+left.getType());\r\n\treturn false;\r\n}\r\nforeignShipments_constraint;";
            Enabled = true;
            Name = foreignShipments_constraint;
            Permission = RuleEditor;
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptConstraint";
            Condition = "function eInvoiceApprover_constraint(left, right)\r\n{\r\n\tvar arLeft=0;\r\n\tvar arRight=0;\r\n\tLog.javascript.debug(\"eInvoiceApprover rule\");\r\n\tLog.javascript.debug(\"Left rule type: \" +left.getType());\r\n\tLog.javascript.debug(\"Right rule type : \" +right.getType());\r\n\tif(left!=null && left.getType().equals(\"eInvoiceApprover\")){\r\n\t\tarLeft = 2;//getRulePriority(left);\r\n\t\tLog.javascript.debug(\"eInvoiceApprover on LHS\");\r\n\t}\t\r\n\tLog.javascript.debug(\"Checking right.\");\r\n\tif(right != null && right.getType().equals(\"eInvoiceApprover\")){\r\n\t\tarRight = 2;//getRulePriority(right);\r\n\t\tLog.javascript.debug(\"eInvoiceApprover on RHS\");\r\n\t}\t\r\n\tLog.javascript.debug(\"Rule priority: Left: \"+arLeft + \", Right: \" +arRight);\r\n\tif(arLeft==1 && left.getType().equals(\"eInvoiceApprover\")){\r\n\t\tLog.javascript.debug(\"eInvoiceApprover First\");\r\n\t\treturn left.getType().equals(\"eInvoiceApprover\");\r\n\t}\r\n\telse if(arRight==2 && right.getType().equals(\"eInvoiceApprover\") && !left.getType().equals(\"foreignShipments\")){\r\n\t\tLog.javascript.debug(\"eInvoiceApprover right\");\r\n\t\treturn right.getType().equals(\"eInvoiceApprover\");\t\r\n\t}\r\n\tLog.javascript.debug(\"Right :\" + right.getType());\r\n\tLog.javascript.debug(\"Left :\"+left.getType());\r\n\treturn false;\r\n}\r\neInvoiceApprover_constraint;\r\n";
            Enabled = true;
            Name = eInvoiceApprover_constraint;
            Permission = RuleEditor;
        },
        {
            ApprovalRequestType = "CSCL Customs Team";
            Classname = ariba.approvable.rules.FirstConstraint;
            Enabled = true;
            Name = "CSCL As First Watcher";
            Permission = RuleEditor;
        }
    );
    Current = true;
    EditRule = "/* \r\n  Edit Rule:\r\n     1. Invoice Manager can make any changes.\r\n     2. Otherwise, regenerate the flow.\r\n*/\r\nfunction edit_rule (user, a, fields, changes)\r\n{\r\n\tvar hasRequestedAction = false;\r\n\tif (!fields.isEmpty()) {\r\n\t\tLog.customer.debug(\"EDIT %%%%%% Fields.size(): \" + fields.size());\r\n\t\tfor (var i = 0, s = fields.size(); i < s; i++) {\r\n\t\t\tvar field = fields.get(i);\r\n\t\t\tLog.customer.debug(\"EDIT %%%%%% Field: \" + field);\r\n\t\t\tif (field.equals(\"RequestedAction\")) {\r\n\t\t\t\thasRequestedAction = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (hasRequestedAction && !changes.isEmpty()) {\r\n\t\t\tLog.customer.debug(\"EDIT %%%%%% Changes.size(): \" + changes.size());\r\n\t\t\tfor (i = 1, numOfElements = changes.size(); i <= numOfElements; i++) {\r\n\t\t\t\tvar change = changes.get(numOfElements - i);\r\n\t\t\t\tLog.customer.debug(\"Change: \" + change); \t\t\t\r\n\t\t\t\tif (change.fieldName == \"RequestedAction\") {\r\n\t\t\t\t\tvar action = change.element;\r\n\t\t\t\t\tLog.customer.debug(\"action: \" + action);\r\n\t\t\t\t\tif (action==2) {\r\n\t\t\t\t\t\treturn Approvable.EditRequiresResubmit;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\t\r\n\t\t}\r\n\t}\r\n\tif (user.hasPermission(\"InvoiceManager\")) {\r\n\t\treturn Approvable.EditAllowedWithoutEffects;\r\n    \t}\r\n\treturn Approvable.EditAllowedWithoutEffects;\r\n}\r\nedit_rule;\r\n";
    EditRulePermission = RuleEditor;
    EditRuleType = JavaScript;
    Edits = ( );
    Filters = (
        {
            Classname = "ariba.approvable.rules.JavaScriptFilterRule";
            Enabled = true;
            Filter = "function remove_duplicates (ir, ar, filtered) \r\n{ \r\n\tvar approver = ar.getApprover();\r\n\tvar approverName = approver.getUniqueName();\r\n\tvar artmp; \r\n\r\nLog.javascript.debug(\"CDM ::: The approvalReq is \" + approverName);\r\nLog.javascript.debug(\"CDM ::: The filtered size is \" + filtered.size());\r\n\r\n\tfor (var i = 0, s = filtered.size(); i < s; i++)\r\n\t{\r\n\t\tartmp = filtered.get(i);\r\n\t\tif (artmp.getApprover()==approver) \r\n\t\t{ \r\n\t\t\treturn ar; \r\n\t\t} \r\n\t}\r\n\tif (filtered.size() > 2){\r\nLog.javascript.debug(\"CDM ::: The filtered size is > 2\");\r\n\t\tif (\"Data Maintainer\".equals(approverName)){\r\nLog.javascript.debug(\"CDM ::: Remove DM\");\r\n\t\t\treturn ar;\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n}\r\nremove_duplicates;";
            Name = "Remove Duplicates";
            Permission = RuleEditor;
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptFilterRule";
            Enabled = false;
            Filter = "function check_if_DM_needed (ir, ar, filtered) \r\n{\r\n\tvar approver = ar.getApprover();\r\n\tvar approverName = ar.getUniqueName();\r\n\tvar artmp;\r\nLog.javascript.debug(\"CDM ::: The approvalReq is \" + approverName);\r\nLog.javascript.debug(\"CDM ::: The filtered size is \" + filtered.size());\r\n\r\n\tif (filtered.size() > 2){\r\nLog.javascript.debug(\"CDM ::: The filtered size is > 2\");\r\n\t\tif (\"Data Maintainer\".equals(approverName)){\r\nLog.javascript.debug(\"CDM ::: Remove DM\");\r\n\t\t\treturn ar;\r\n\t\t}\r\n\t}\r\nLog.javascript.debug(\"CDM ::: Do Not Remove DM\");\r\n\treturn null;\r\n}\r\ncheck_if_DM_needed;";
            Name = "Check if Data Maintainer is needed";
            Permission = RuleEditor;
        }
    );
    LoadDB = true;
    Name = "CAT SAP InvoiceReconciliation Rules";
    Simples = (
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "var CatSAPIRRulesUtil = config.java.invoicing.sap.CatSapIRApprovalRulesUtil;\r\nfunction customTaxApprover_condition(approvable)\r\n{\r\n\r\n    if (ir.getRequestedAction() == 2)\r\n   {\r\n       //if requested action is to reject\r\n       return false;\r\n    }\r\n    if (!ir.getInvoice().getInvoicePurpose().equals(\"standard\")) {\r\n       return false;\r\n    }\r\n    if (ir.getInvoice().getInvoiceOperation().equals(\"delete\")) {\r\n       return false;\r\n    }\r\n    return true;\r\n}\r\ncustomTaxApprover_condition;";
            Enabled = false;
            Name = "Custom Tax Approver (US)";
            Permission = RuleEditor;
            Result = "function customTaxApprover_action (r)\r\n{\r\n    var dataapprover = Role_DataMaintainer;\r\n    var datareason = \"DataMaintainer_IRException\";\r\n\r\n    Log.javascript.debug(\"Exception is: \"+ exceptionId);\r\n    var exception = exceptionId.getLocal(ir);\r\n    Log.javascript.debug(\"Exception is: \"+ exception.getType().getUniqueName());\r\n    var approver = CatSAPIRRulesUtil.getTaxExceptionHandler(exception);\r\n    Log.javascript.debug(\"The Exception Handler is : \"+approver);\r\n    //var addDataMaintainer = CatSAPIRRulesUtil.validateExceptionHandler(approver,ir.getPartition());\r\n    var addDataMaintainer = false;\r\n    Log.javascript.debug(\"Add DataMaintainer ? \"+addDataMaintainer);\r\n\r\n    //then use the logic used in the java - checking active and inactive approver\r\n    \r\n    if (addDataMaintainer) {\r\n            \r\n            Log.javascript.debug(\" Inside IF :: approver is InActive \");\r\n            var uniqueName = approver.getUniqueName();\r\n            var name= approver.getName().getPrimaryString();\r\n            var rulesreason = \"Data Maintainer is added due to InActive approver \"+name+\" (\"+uniqueName+\")\"+\" who must approve this Invoice Reconciliation for \"+ exception.getType().getName().getPrimaryString();\r\n            approver = Role_DataMaintainer;\r\n            Log.javascript.debug(\" Inside IF :: approver=\"+approver );\r\n\r\n            return ApprovalRequest.create(ir,\r\n                                          approver,\r\n                                          true,\r\n                                          \"ruleReasons\",\r\n                                           rulesreason);\r\n    }\r\n    else {\r\n\t    Log.javascript.debug(\" inside else ::approver is Active\");\r\n\t    if (approver!=null)\r\n\t\t{\r\n\t\treturn ApprovalRequest.create(ir,\r\n\t\t\t\t\t  approver,\r\n\t\t\t\t\t  true,\r\n\t\t\t\t\t  \"ruleReasons\",\r\n\t\t\t\t\t  \"Exception Handler must approve this Invoice Reconciliation for \"+ exception.getType().getName().getPrimaryString());\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\treturn ApprovalRequest.create(ir,\r\n\t\t\t\t\t  dataapprover,\r\n\t\t\t\t\t  true,\r\n\t\t\t\t\t  \"ruleReasons\",\r\n\t\t\t\t\t   datareason);\r\n\r\n\t\t}\r\n\r\n    }\r\n\r\n}\r\ncustomTaxApprover_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "var CatSAPIRRulesUtil = config.java.invoicing.sap.CatSapIRApprovalRulesUtil;\r\n\r\nfunction catexception_handler_condition (ir, exception)\r\n{\r\n\r\n    if (ir.getRequestedAction() == 2)\r\n   {\r\n       //if requested action is to reject\r\n       return false;\r\n    }\r\n    if (!ir.getInvoice().getInvoicePurpose().equals(\"standard\")) {\r\n       return false;\r\n    }\r\n    if (ir.getInvoice().getInvoiceOperation().equals(\"delete\")) {\r\n       return false;\r\n    }\r\n    return true;\r\n}\r\ncatexception_handler_condition;";
            Enabled = true;
            FieldPath = AllUnreconciledExceptions.BaseId;
            Name = "CAT CSV Exception Handler";
            Permission = RuleEditor;
            Result = "function catexception_handler_action (ir, exceptionId)\r\n{\r\n    var dataapprover = Role_DataMaintainer;\r\nvar datareason = \"DataMaintainer_IRException\";\r\n\r\n   Log.javascript.debug(\"Exception is: \"+ exceptionId);\r\n   var exception = exceptionId.getLocal(ir);\r\n   Log.javascript.debug(\"Exception is: \"+ exception.getType().getUniqueName());\r\n   if(exception.getType().getUniqueName().equals(\"CATTaxCalculationFailed\")){\r\n   return null;\r\n   }\r\n   var approver = CatSAPIRRulesUtil.getExceptionHandler(exception);\r\n   Log.javascript.debug(\"The Exception Handler is : \"+approver);\r\n   //var addDataMaintainer = CatSAPIRRulesUtil.validateExceptionHandler(approver,ir.getPartition());\r\n   var addDataMaintainer = false;\r\n    Log.javascript.debug(\"Add DataMaintainer ? \"+addDataMaintainer);\r\n\r\n    //then use the logic used in the java - checking active and inactive approver\r\n    \r\n    if (addDataMaintainer) {\r\n            \r\n            Log.javascript.debug(\" Inside IF :: approver is InActive \");\r\n            var uniqueName = approver.getUniqueName();\r\n            var name= approver.getName().getPrimaryString();\r\n            var rulesreason = \"Data Maintainer is added due to InActive approver \"+name+\" (\"+uniqueName+\")\"+\" who must approve this Invoice Reconciliation for \"+ exception.getType().getName().getPrimaryString();\r\n            approver = Role_DataMaintainer;\r\n            Log.javascript.debug(\" Inside IF :: approver=\"+approver );\r\n\r\n            return ApprovalRequest.create(ir,\r\n                                          approver,\r\n                                          true,\r\n                                          \"ruleReasons\",\r\n                                           rulesreason);\r\n    }\r\n    else {\r\n            Log.javascript.debug(\" inside else ::approver is Active\");\r\n            if (approver!=null)\r\n{\r\nreturn ApprovalRequest.create(ir,\r\n                                          approver,\r\n                                          true,\r\n                                          \"ruleReasons\",\r\n                                          \"Exception Handler must approve this Invoice Reconciliation for \"+ exception.getType().getName().getPrimaryString());\r\n}\r\nelse\r\n{\r\nreturn ApprovalRequest.create(ir,\r\n                                          dataapprover,\r\n                                          true,\r\n                                          \"ruleReasons\",\r\n                                           datareason);\r\n\r\n}\r\n\r\n    }\r\n    \r\n }\r\ncatexception_handler_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "//27/07/2013  IBM Mounika K  Q4 2013-RSD 121-FDD 1.1/TDD 1 Implemented Geneva supervisor rule logic\r\n\r\nvar CatCSVIRRulesUtil = config.java.invoicing.vcsv1.CatCSVIRApprovalRulesUtil;\r\nvar tolerance = new Money(new BigDecimal(\"5.00\"),Currency.getBaseCurrency());\r\nfunction supervisor_condition (ir)\r\n{\r\n    if (!ir.getInvoice().getInvoicePurpose().equals(\"standard\")) {\r\n    Log.javascript.debug(\"Invoice ops is Standard\");\r\n       return false;\r\n    }\r\n    if (ir.getInvoice().getInvoiceOperation().equals(\"delete\")) {\r\n    Log.javascript.debug(\"Invoice ops is delete\");\r\n       return false;\r\n    }\r\n    if (ir.getTotalCost().getSign() < 0) {\r\n    Log.javascript.debug(\"Invoice total is negative\");\r\n       return false;\r\n    }\r\n    if (ir.getConsolidated()) {\r\n    Log.javascript.debug(\"Invoice is consolidated\");\r\n       return false;\r\n    }\r\n    if (ir.getRequestedAction() == 2) {\r\n      // if requested action is to reject\r\n    Log.javascript.debug(\"Invoice action is to reject\");\r\n       return false;\r\n    }\r\n    \r\n    Log.javascript.debug(\"Getting Requester\");\r\n    var requester = CatCSVIRRulesUtil.getRequester(ir);\r\n    if (!requester instanceof User) {\r\n    Log.javascript.debug(\"Requester not an instance of user\");\r\n       return false;\r\n    }\r\n    var puser = CommonUser.getPartitionedUser(requester, ir.getPartition())\r\n    if (puser == null) {\r\n       return false;\r\n    }    \r\n    var eac = puser.getFieldValue(\"SAPExpenseApprovalCode\");\r\n    Log.javascript.debug(\"SC ::: requester code: \" + eac);\r\n    if (eac == null) {\r\n       return false;\r\n    }\r\n    var limit = eac.getFieldValue(\"Amount\");\r\n    Log.javascript.debug(\"SC ::: requester limit: \" + limit);\r\n    if (limit == null) {\r\n       return false;\r\n    }\r\n    var rlic = ir.getOrder();\r\n    if (rlic == null) {\r\n        rlic = ir.getMasterAgreement();\r\n    }\r\n    Log.javascript.debug(\"SC ::: PO/MA: \" + rlic);\r\n    if (rlic == null) {\r\n       return false;\r\n    }\r\n    var rlicTotalCost = rlic.getTotalCost();\r\n    if (rlicTotalCost == null || rlicTotalCost.getAmount() == 0.0000000000) {\r\n       //can be null for MA with no max limit\r\n       return false;\r\n    } else {\r\n    \r\n       //Start : Q4 2013-RSD 121-FDD 1.1/TDD 1\r\n       var rlicCurrency = rlicTotalCost.getCurrency(); \r\n       Log.javascript.debug(\"SC ::: rlicTotalCost (before tolerance): \" + rlicTotalCost);  \r\n       \r\n       // add tolerance to negate currency conversion risk\r\n       rlicTotalCost = rlicTotalCost.add(tolerance);\r\n       Log.javascript.debug(\"SC ::: rlicTotalCost (after tolerance): \" + rlicTotalCost);         \r\n       rlicTotalCost = rlicTotalCost.getAmount();\r\n    }\r\n    \r\n    Log.javascript.debug(\"SC ::: Total Order/MA Cost (in Order/MA curr): \" +  rlicTotalCost);\r\n    var totalInvoiceAmount = CatCSVIRRulesUtil.getCumulativeAmount(ir, rlic, false, false);\r\n    if (totalInvoiceAmount == null || totalInvoiceAmount == 0.0000000000) {\r\n       return false;\r\n    }\r\n    Log.javascript.debug(\"SC ::: requester limit/invoice total less tax: \" + limit + \"/\" + totalInvoiceAmount);\r\n    if (totalInvoiceAmount.compareTo(rlicTotalCost) <= 0) {\r\n       return false;\r\n    } \r\n    // convert to currency of PO \r\n    var limitMoney = new Money(limit,ariba.basic.core.Currency.getBaseCurrency());\r\n    Log.javascript.debug(\"SC ::: limitMoney: \" + limitMoney);\r\n    if (limitMoney == null) {\r\n\treturn false;\r\n    }\t\r\n    var limitMoneyConverted = limitMoney.convertToCurrency(rlicCurrency);\r\n    Log.javascript.debug(\"SC ::: limitMoneyConverted: \" + limitMoneyConverted);\r\n    if (limitMoneyConverted == null) {\r\n\treturn false;\r\n    }\r\n    limit = limitMoneyConverted.getAmount();\r\n    //End : Q4 2013-RSD 121-FDD 1.1/TDD 1\r\n    \r\n    Log.javascript.debug(\"SC ::: limit: \" + limit);    \r\n\r\n    if (limit.compareTo(totalInvoiceAmount) < 0) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nsupervisor_condition;";
            Enabled = true;
            Name = Supervisor;
            Permission = RuleEditor;
            Result = "function supervisor_action (ir)\r\n{\r\n    Log.javascript.debug(\"SC ::: In Supervisor Action...\");\r\n    var requester = CatCSVIRRulesUtil.getRequester(ir);\r\n    Log.javascript.debug(\"SC ::: requester is: \" + requester);\r\n    var approver = null;\r\n    var reason = null;\r\n    var required = true;\r\n    var supervisor = User2Supervisor(requester);\r\n    if (supervisor instanceof User) {\r\n       Log.javascript.debug(\"SC ::: requester's supervisor: \" + supervisor);\r\n       approver = supervisor;\r\n       reason = \"Chain_Supervisor\";\r\n    }\r\n\r\n    return ApprovalRequest.create(ir,\r\n                                  approver,\r\n                                  required,\r\n                                  \"cat.rulereasons\",\r\n                                  reason);\r\n}\r\nsupervisor_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "var CatSAPIRRulesUtil = config.java.invoicing.sap.CatSapIRApprovalRulesUtil;\r\n\r\nfunction contractContact_condition (ir)\r\n{\r\n    if (!ir.getInvoice().getInvoicePurpose().equals(\"standard\")) {\r\n       return false;\r\n    }\r\n    if (ir.getInvoice().getInvoiceOperation().equals(\"delete\")) {\r\n       return false;\r\n    }\r\n    if (ir.getTotalCost().getSign() < 0) {\r\n       return false;\r\n    }\r\n    if (ir.getConsolidated()) {\r\n       return false;\r\n    }\r\n    if (ir.getRequestedAction() == 2) {\r\n       //if requested action is to reject\r\n       return false;\r\n    }\r\n    \r\n    if (ir.getOrder() != null){\r\n       return false;\r\n    }\r\n    \r\n    var ma = ir.getMasterAgreement();\r\n    if (ma != null && !ma.isReceivable()) {\r\n       Log.javascript.debug(\"contractContact_condition\");\r\n       return true;\r\n    }\r\n    return false;\r\n}\r\ncontractContact_condition;";
            Enabled = true;
            Name = "Contract Contact Approver";
            Permission = RuleEditor;
            Result = "function contractContact_action (ir)\r\n{\r\n   Log.javascript.debug(\"In contractContact_action\");\r\n   var requester = null;\r\n\r\n   requester = CatSAPIRRulesUtil.getRequester(ir);\r\n\r\n   Log.javascript.debug(\"contractContact_action ::: approver is: \" + requester.getUniqueName());\r\n   var approver = null;\r\n   var reason = null;\r\n   var required = true;\r\n   if (requester instanceof User) {\r\n      approver = requester;\r\n      reason = \"Contract Contact must approve this Invoice Reconciliation\";\r\n   }\r\n   return ApprovalRequest.create(ir,\r\n                                 approver,\r\n                                 required,\r\n                                 \"cat.rulereasons\",\r\n                                 reason);\r\n}\r\ncontractContact_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "var CatCSVIRRulesUtil = config.java.invoicing.vcsv1.CatCSVIRApprovalRulesUtil;\r\n\r\nfunction addLinda_condition (ir)\r\n{\r\n\r\n    if (ir.getRequestedAction() == 2) {\r\n       //if requested action is to reject\r\n       return false;\r\n    }\r\n    if (!ir.getInvoice().getInvoicePurpose().equals(\"standard\")) {\r\n       return false;\r\n    }\r\n    if (ir.getInvoice().getInvoiceOperation().equals(\"delete\")) {\r\n       return false;\r\n    }\r\n\r\n    var LindaAlwaysRequired = CatCSVIRRulesUtil.LindaAlwaysRequired;\r\n    if (!LindaAlwaysRequired.equalsIgnoreCase(\"true\")){\r\n    \treturn false;\r\n    }\r\n    return true;\r\n}\r\naddLinda_condition;";
            Enabled = false;
            Name = "Always Add Linda";
            Permission = RuleEditor;
            Result = "function addLinda_action (ir)\r\n{\r\n   Log.javascript.debug(\"Allways Add Linda Yates\");\r\n   var approver = CatCSVIRRulesUtil.getUserForLinda(ir);\r\n   Log.javascript.debug(\"ALC ::: Approver is: \"+approver.getName());\r\n   return ApprovalRequest.create(ir,\r\n                               approver,\r\n                               true,\r\n\t              \"ruleReasons\",\r\n                              \"Linda M. Yates always added as an AP user for the initial go-live.\");\r\n}\r\naddLinda_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "var CatCSVIRRulesUtil = config.java.invoicing.vcsv1.CatCSVIRApprovalRulesUtil;\r\nvar CatValidateAccountingString = config.java.action.vcsv1.CatValidateInvAccountingString;\r\n\r\nfunction errorHandler_condition (ir)\r\n{\r\n    if (ir.getRequestedAction() == 2) {\r\n       //if requested action is to reject\r\n       return false;\r\n    }\r\n    if (!ir.getInvoice().getInvoicePurpose().equals(\"standard\")) {\r\n       return false;\r\n    }\r\n    if (ir.getInvoice().getInvoiceOperation().equals(\"delete\")) {\r\n       return false;\r\n    }\r\n\r\n    var irLineItems = ir.getLineItems();\r\n    Log.javascript.debug(\"Line Item Size :\"+irLineItems.size());\r\n    \r\n    for(var i = 0; i < irLineItems.size(); i++)\r\n    {\r\n        Log.javascript.debug(\"Line Item : \"+(i+1));\r\n        var irli = irLineItems.get(i);\r\n        var sac = irli.getAccountings();\r\n        if (sac != null) {\r\n              var sacList = sac.getSplitAccountings();\r\n              Log.javascript.debug(\" Split Accounting Size :\"+sacList.size());\r\n              for (var j = 0; j < sacList.size(); j++) {\r\n                  Log.javascript.debug(\"Line Item \"+(i+1)+\" Split Accounting \"+(j+1));\r\n                  var sa = sacList.get(j);\r\n                  var accntFacility = sa.getFieldValue(\"AccountingFacility\");\r\n                  Log.javascript.debug(\"Accounting Facility is \"+accntFacility);\r\n                  if(accntFacility == null)\r\n                     return true;\r\n                  var response = CatValidateAccountingString.validateAccounting(sa);\r\n                  Log.javascript.debug(\"Response after validating Accounting \"+response);\r\n                  var sbrtnRtCode = response.getMessage().getSubroutineReturnCode();\r\n                  Log.javascript.debug(\"Sub Routine Code obtained from response \"+sbrtnRtCode);\r\n                  if (sbrtnRtCode != null && (sbrtnRtCode.compareTo(\"00\") != 0)) {\r\n                     return true;\r\n                  }\r\n              }\r\n        }\r\n    }\r\n    \r\n    return false;\r\n}\r\nerrorHandler_condition;";
            Enabled = false;
            Name = "IR Error Handler (Data Maintainer)";
            Permission = RuleEditor;
            Result = "function errorHandler_action (ir)\r\n{\r\n   Log.javascript.debug(\"Entering errorHandler_action\");\r\n   //var approver = Role.getRole(CatCSVIRRulesUtil.DEFAULT_ROLE);\r\n  var approver = Role.getRole(\"Transaction Center (US)\");\r\n   Log.javascript.debug(\"errorHandler ::: Approver is: \" + approver.getName());\r\n   return ApprovalRequest.create(ir,\r\n                               approver,\r\n                               true,\r\n\t                 \"ruleReasons\",\r\n                               \"Approver added due to erroneous Accounting Distribution on the Invoice Reconciliation.\");\r\n}\r\nerrorHandler_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "var CatCSVIRRulesUtil = config.java.invoicing.vcsv1.CatCSVIRApprovalRulesUtil;\r\n\r\nfunction supervisor_condition (ir)\r\n{\r\n    if (!ir.getInvoice().getInvoicePurpose().equals(\"standard\")) {\r\n       return false;\r\n    }\r\n    if (ir.getInvoice().getInvoiceOperation().equals(\"delete\")) {\r\n       return false;\r\n    }\r\n    if (ir.getTotalCost().getSign() < 0) {\r\n       return false;\r\n    }\r\n    if (ir.getConsolidated()) {\r\n       return false;\r\n    }\r\n    if (ir.getRequestedAction() == 2) {\r\n       //if requested action is to reject\r\n       return false;\r\n    }\r\n    var requester = CatCSVIRRulesUtil.getRequester(ir);\r\n    if (!requester instanceof User) {\r\n       return false;\r\n    }\r\n    var eac = requester.getFieldValue(\"ExpenseApprovalCode\");\r\n    Log.javascript.debug(\"SC ::: requester code: \" + eac);\r\n    if (eac == null) {\r\n       return false;\r\n    }\r\n    var limit = getUserExpenseLimitBD(eac);\r\n    Log.javascript.debug(\"SC ::: requester limit: \" + limit);\r\n    if (limit == null) {\r\n       return false;\r\n    }\r\n    var rlic = ir.getOrder();\r\n    if (rlic == null) {\r\n        rlic = ir.getMasterAgreement();\r\n    }\r\n    Log.javascript.debug(\"SC ::: PO/MA: \" + rlic);\r\n    if (rlic == null) {\r\n       return false;\r\n    }\r\n    var rlicTotalCost = rlic.getTotalCost();\r\n    if (rlicTotalCost == null) {\r\n       //can be null for MA with no max limit\r\n       return false;\r\n    } else {\r\n       rlicTotalCost = rlicTotalCost.getApproxAmountInBaseCurrency();\r\n    }\r\n    Log.javascript.debug(\"SC ::: Total Order/MA Cost (inBC): \" + rlicTotalCost);\r\n    var totalInvoiceAmount = CatCSVIRRulesUtil.getCumulativeAmount(ir, false);\r\n    if (totalInvoiceAmount == null) {\r\n       return false;\r\n    }\r\n    Log.javascript.debug(\"SC ::: requester limit/invoice total: \" + limit + \"/\" + totalInvoiceAmount);\r\n    var accumulatedTotalTax = CatCSVIRRulesUtil.getCumulativeAmount(ir, true);\r\n    if (accumulatedTotalTax == null) {\r\n       return false;\r\n    }\r\n    Log.javascript.debug(\"SC ::: Accumulated Tax: \" + accumulatedTotalTax);\r\n    var totalInvoiceAmountLessTax = \r\n          totalInvoiceAmount.subtract(accumulatedTotalTax);\r\n    Log.javascript.debug(\"SC ::: TotalInvoiceAmountLessTax: \" + totalInvoiceAmountLessTax);\r\n    if (totalInvoiceAmountLessTax.compareTo(rlicTotalCost) <= 0) {\r\n        return false;\r\n    }\r\n    if (limit.compareTo(totalInvoiceAmountLessTax) < 0) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nsupervisor_condition;";
            Enabled = false;
            Name = "Copy of Supervisor";
            Permission = RuleEditor;
            Result = "function supervisor_action (ir)\r\n{\r\n    Log.javascript.debug(\"SC ::: In Supervisor Action...\");\r\n    var requester = CatCSVIRRulesUtil.getRequester(ir);\r\n    Log.javascript.debug(\"SC ::: requester is: \" + requester);\r\n    var approver = null;\r\n    var reason = null;\r\n    var required = true;\r\n    var supervisor = User2Supervisor(requester);\r\n    if (supervisor instanceof User) {\r\n       Log.javascript.debug(\"SC ::: requester's supervisor: \" + supervisor);\r\n       approver = supervisor;\r\n       reason = \"Chain_Supervisor\";\r\n    }\r\n\r\n    return ApprovalRequest.create(ir,\r\n                                  approver,\r\n                                  required,\r\n                                  \"cat.rulereasons\",\r\n                                  reason);\r\n}\r\nsupervisor_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function invoicemanager_condition(approvable,LineItems)\r\n{\r\n    if (approvable.getRequestedAction() == 2) \r\n    {\r\n       //if requested action is to reject\r\n       return false;\r\n    }\r\n   if ((\"Rejecting\".equals(approvable.getStatusString())) || (\"Rejected\".equals(approvable.getStatusString())))\r\n   {\r\n      return false;\r\n}\r\nvar comcode = approvable.getDottedFieldValue(\"CompanyCode.UniqueName\");\r\nLog.javascript.debug(\"Invoice Manager Simple Rule :: Company Code: \"+comcode);\r\nvar myList = new ArrayList();\r\nmyList = CatUtil.readDataFromFile(CatUtil.CC_FileName);\r\nLog.javascript.debug(\"Invoice Manager Simple Rule :: mylist: \"+myList);\r\nvar validCC = CatUtil.checkValueIsAvailable(comcode,myList);\r\nLog.javascript.debug(\"Invoice Manager Simple Rule :: validCC: \"+validCC);\r\nif((approvable.getTotalCost().getAmount() < 0) && validCC != 'true' )\r\n{\r\n\tLog.javascript.debug(\"Invoice Manager Simple Rule\");\r\nreturn true;\r\n}\r\nreturn false;\r\n}\r\n invoicemanager_condition;";
            Enabled = true;
            FieldPath = LineItems;
            Name = "Invoice Manager";
            Permission = RuleEditor;
            Result = "function invoicemanager_action(r,LineItems)\r\n      {\r\n \r\n      Log.javascript.debug(\"-Ve Dollar Invoice\");\r\n      var reason;\r\n      var role = CatUtil.getRoleforSplitterRuleforInvoice(r,\"IM\",LineItems);\r\n      Log.javascript.debug(\"Invoice Manager role : \" + role );\r\n      var required = true;\r\n      if (role!= null)\r\n      {\r\n      reason =\"Invoice Manager has to Approve for Credit Invoices\";\r\n      Log.javascript.debug(\"InvoiceManager: InvoiceManager role is active\");\r\n      return ApprovalRequest.create(r, role, required, \"reason\", reason);\r\n      }\r\n      else \r\n      {\r\n      Log.javascript.debug(\"NOInvoiceManager role\");\r\n      }\r\n }\r\ninvoicemanager_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "var CatSAPIRRulesUtil = config.java.invoicing.sap.CatSapIRApprovalRulesUtil;\r\nfunction customTaxApprover_condition(ir, exception)\r\n{\r\n\r\n    if (ir.getRequestedAction() == 2)\r\n   {\r\n       //if requested action is to reject\r\n       return false;\r\n    }\r\n    if (!ir.getInvoice().getInvoicePurpose().equals(\"standard\")) {\r\n       return false;\r\n    }\r\n    if (ir.getInvoice().getInvoiceOperation().equals(\"delete\")) {\r\n       return false;\r\n    }\r\n    return true;\r\n}\r\ncustomTaxApprover_condition;";
            Enabled = true;
            FieldPath = AllUnreconciledExceptions.BaseId;
            Name = "Custom Tax Approver";
            Permission = RuleEditor;
            Result = "function customTaxApprover_action (ir, exceptionId)\r\n{\r\n    var dataapprover = Role_DataMaintainer;\r\n    var datareason = \"DataMaintainer_IRException\";\r\n\r\n    Log.javascript.debug(\"Exception is: \"+ exceptionId);\r\n    var exception = exceptionId.getLocal(ir);\r\n    Log.javascript.debug(\"Exception is: \"+ exception.getType().getUniqueName());\r\n   if(!exception.getType().getUniqueName().equals(\"CATTaxCalculationFailed\")){\r\n   return null;\r\n   }\r\n    var approver = CatSAPIRRulesUtil.getTaxExceptionHandler(exception);\r\n    Log.javascript.debug(\"The Exception Handler is : \"+approver);\r\n    //var addDataMaintainer = CatSAPIRRulesUtil.validateExceptionHandler(approver,ir.getPartition());\r\n    var addDataMaintainer = false;\r\n    Log.javascript.debug(\"Add DataMaintainer ? \"+addDataMaintainer);\r\n\r\n    //then use the logic used in the java - checking active and inactive approver\r\n    \r\n    if (addDataMaintainer) {\r\n            \r\n            Log.javascript.debug(\" Inside IF :: approver is InActive \");\r\n            var uniqueName = approver.getUniqueName();\r\n            var name= approver.getName().getPrimaryString();\r\n            var rulesreason = \"Data Maintainer is added due to InActive approver \"+name+\" (\"+uniqueName+\")\"+\" who must approve this Invoice Reconciliation for \"+ exception.getType().getName().getPrimaryString();\r\n            approver = Role_DataMaintainer;\r\n            Log.javascript.debug(\" Inside IF :: approver=\"+approver );\r\n\r\n            return ApprovalRequest.create(ir,\r\n                                          approver,\r\n                                          true,\r\n                                          \"ruleReasons\",\r\n                                           rulesreason);\r\n    }\r\n    else {\r\n\t    Log.javascript.debug(\" inside else ::approver is Active\");\r\n\t    if (approver!=null)\r\n\t\t{\r\n\t\treturn ApprovalRequest.create(ir,\r\n\t\t\t\t\t  approver,\r\n\t\t\t\t\t  true,\r\n\t\t\t\t\t  \"ruleReasons\",\r\n\t\t\t\t\t  \"Exception Handler must approve this Invoice Reconciliation for \"+ exception.getType().getName().getPrimaryString());\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\treturn ApprovalRequest.create(ir,\r\n\t\t\t\t\t  dataapprover,\r\n\t\t\t\t\t  true,\r\n\t\t\t\t\t  \"ruleReasons\",\r\n\t\t\t\t\t   datareason);\r\n\r\n\t\t}\r\n\r\n    }\r\n\r\n}\r\ncustomTaxApprover_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function eInvoiceApprover_condition(ir)\r\n{\r\n\tif(ir instanceof ariba.invoicing.core.InvoiceReconciliation && checkCompanySetting(ir,\"eInvoicingApprover\") && ir.getInvoice().getLoadedFrom()==ariba.invoicing.core.Invoice.LoadedFromACSN && ir.getProcessedState()!=8){\r\n\t\tLog.javascript.debug(\"eInvoice approver rule enabled\");\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\neInvoiceApprover_condition;";
            Enabled = true;
            Name = eInvoiceApprover;
            Permission = RuleEditor;
            Result = "function eInvoiceApprover_action(ir)\r\n{\r\n\tLog.javascript.debug(\"Invoice loaded from ASN. Adding eInvoice approver.\");\t\t\r\n\tvar sapSource=\"\";\r\n\tvar companyCode=\"\";\r\n\tvar irPlant=\"\";\r\n\tvar countryCode=\"\";\r\n\tif(ir.getFieldValue(\"CompanyCode\")!=null){\r\n\t\tLog.javascript.debug(\"Company Code not null\");\r\n\t\tsapSource = ir.getDottedFieldValue(\"CompanyCode.SAPSource\");\r\n\t\tcompanyCode = ir.getDottedFieldValue(\"CompanyCode.UniqueName\");\r\n\t\tLog.javascript.debug(\"SAP source- \"+sapSource+\" Company code- \"+companyCode);\r\n\t\tif(ir.getDottedFieldValue(\"CompanyCode.RegisteredAddress\")!=null){\r\n\t\t\tLog.javascript.debug(\"Company registered address not null\");\r\n\t\t\tvar regAddress = ir.getDottedFieldValue(\"CompanyCode.RegisteredAddress.PostalAddress\");\r\n\t\t\tif(regAddress!=null && regAddress.getFieldValue(\"Country\")!=null){\r\n\t\t\t\tcountryCode = regAddress.getDottedFieldValue(\"Country.UniqueName\");\r\n\t\t\t\tLog.javascript.debug(\"Reg Address Country code\" + countryCode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif(ir.getDefaultLineItem().getFieldValue(\"ShipTo\")!=null){\r\n\t\tLog.javascript.debug(\"Shipping address not null\");\r\n\t\tirPlant=ir.getDefaultLineItem().getDottedFieldValue(\"ShipTo.UniqueName\");\r\n\t\tLog.javascript.debug(\"Ship to - \"+irPlant);\r\n\t}\r\n\tif(!sapSource.equalsIgnoreCase(\"\")){\r\n\t\tif(!countryCode.equalsIgnoreCase(\"\") && !companyCode.equalsIgnoreCase(\"\") && !irPlant.equalsIgnoreCase(\"\")){\r\n\t\t\tvar approver = Role.getRole(\"IA_\"+sapSource+\"_\"+countryCode+\"_\"+companyCode+\"_\"+irPlant);\r\n\t\t\tif(approver!=null){\r\n\t\t\t\tLog.javascript.debug(\"eInvoice approver role\" + approver.getUniqueName());\r\n\t\t\t\tvar required =true;\r\n\t\t\t\tvar reason_inv = \"All electronic invoices should be approved by eInvoice approver\";\r\n\t\t\t\treturn ApprovalRequest.create(ir, approver, required, \"reason_inv\",reason_inv);\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\tif(!countryCode.equalsIgnoreCase(\"\") && !companyCode.equalsIgnoreCase(\"\")){\r\n\t\t\tvar approver = Role.getRole(\"IA_\"+sapSource+\"_\"+countryCode+\"_\"+companyCode);\r\n\t\t\tif(approver!=null){\r\n\t\t\t\tLog.javascript.debug(\"eInvoice approver role\" + approver.getUniqueName());\r\n\t\t\t\tvar required =true;\r\n\t\t\t\tvar reason_inv = \"All electronic invoices should be approved by eInvoice approver\";\r\n\t\t\t\treturn ApprovalRequest.create(ir, approver, required, \"reason_inv\",reason_inv);\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\tif(!countryCode.equalsIgnoreCase(\"\")){\r\n\t\t\tvar approver = Role.getRole(\"IA_\"+sapSource+\"_\"+countryCode);\r\n\t\t\tif(approver!=null){\r\n\t\t\t\tLog.javascript.debug(\"eInvoice approver role\" + approver.getUniqueName());\r\n\t\t\t\tvar required =true;\r\n\t\t\t\tvar reason_inv = \"All electronic invoices should be approved by eInvoice approver\";\r\n\t\t\t\treturn ApprovalRequest.create(ir, approver, required, \"reason_inv\",reason_inv);\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvar approver = Role.getRole(\"IA_\"+sapSource);\r\n\t\t\tif(approver!=null){\r\n\t\t\t\tLog.javascript.debug(\"eInvoice approver role\" + approver.getUniqueName());\r\n\t\t\t\tvar required =true;\r\n\t\t\t\tvar reason_inv = \"All electronic invoices should be approved by eInvoice approver\";\r\n\t\t\t\treturn ApprovalRequest.create(ir, approver, required, \"reason_inv\",reason_inv);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\neInvoiceApprover_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function foreignShipments_condition(ir){\r\n\tif(ir instanceof ariba.invoicing.core.InvoiceReconciliation && checkCompanySetting(ir,\"foreignShipments\") && ir.getProcessedState()!=8){\r\n\t\tLog.javascript.debug(\"Foriegn shipment rule enabled at company code\");\r\n\t\tvar fsIdentification=getFSIdentification(ir,\"foreignShipments\");\t\r\n\t\tLog.javascript.debug(\"FSIdentification using - \"+fsIdentification);\r\n\t\tvar isForeignShipment = false;\r\n\t\tvar companyCode=ir.getFieldValue(\"CompanyCode\");;\r\n\t\tif(\"Currency\".equalsIgnoreCase(fsIdentification)){\r\n\t\t\tvar irCurrency = ir.getTotalInvoiced().getCurrency().getUniqueName();\r\n\t\t\tLog.javascript.debug(\"IR currency -\"+irCurrency);\t\t\t\r\n\t\t\tif(companyCode!=null){\r\n\t\t\t\tLog.javascript.debug(\"Company code not null\");\r\n\t\t\t\tvar companyAddress = companyCode.getFieldValue(\"RegisteredAddress\");\r\n\t\t\t\tif(companyAddress!=null){\r\n\t\t\t\t\tLog.javascript.debug(\"Company address not null\");\r\n\t\t\t\t\tvar companyCountry = companyAddress.getPostalAddress().getCountry();\r\n\t\t\t\t\tif(companyCountry!=null&&companyCountry.getDefaultCurrency().getUniqueName().equalsIgnoreCase(irCurrency)){\r\n\t\t\t\t\t\tLog.javascript.debug(\"Local shipment. Special finance approver not needed.\");\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tisForeignShipment=true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(\"ShipFrom\".equalsIgnoreCase(fsIdentification)){\r\nLog.javascript.debug(\"Ship from identification\");\r\n\t\t\tvar shipFromCountry=\"\";\r\n\t\t\tif(ir.getFieldValue(\"SupplierLocation\")!=null && ir.getDottedFieldValue(\"SupplierLocation.PostalAddress\")!=null && ir.getDottedFieldValue(\"SupplierLocation.PostalAddress.Country\")!=null){\r\n\t\t\t\tshipFromCountry=ir.getDottedFieldValue(\"SupplierLocation.PostalAddress.Country.UniqueName\");\r\nLog.javascript.debug(\"Ship from : \"+shipFromCountry);\r\n\t\t\t}\r\n\t\t\tif(companyCode!=null){\r\n\t\t\t\tLog.javascript.debug(\"Company code not null\");\r\n\t\t\t\tvar companyAddress = companyCode.getFieldValue(\"RegisteredAddress\");\r\n\t\t\t\tif(companyAddress!=null){\r\n\t\t\t\t\tLog.javascript.debug(\"Company address not null\");\r\n\t\t\t\t\tvar companyCountry = companyAddress.getPostalAddress().getCountry();\r\nLog.javascript.debug(\"Company country: \"+companyCountry);\r\n\t\t\t\t\tif(companyCountry!=null&&companyCountry.getUniqueName().equalsIgnoreCase(shipFromCountry)){\r\n\t\t\t\t\t\tLog.javascript.debug(\"Local shipment. Special finance approver not needed.\");\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tisForeignShipment=true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//check for other company, country specific constraints\r\n\t\tif(isForeignShipment){\r\n\t\t\tif(companyCode.getFieldValue(\"UniqueName\").equalsIgnoreCase(\"FT00\")){\r\n\t\t\t\tfor(var it = ir.getLineItemsIterator();it.hasNext();){\r\n\t\t\t\t\tLog.javascript.debug(\"Looping through line items\");\r\n\t\t\t\t\tvar irli = it.next();\r\n\t\t\t\t\tvar itemType = irli.getFieldValue(\"LineItemType\");\r\n\t\t\t\t\tif(\"Material Only (TQM)\".equalsIgnoreCase(itemType)){\r\n\t\t\t\t\t\tLog.javascript.debug(\"Material line found. Returning true\");\r\n\t\t\t\t\t\tfsIdentification=true;\r\n\t\t\t\t\t\treturn fsIdentification;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfsIdentification=false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn fsIdentification;\r\n\t\t}\r\n\t\tLog.javascript.debug(\"Returning false. No material lines\");\r\n\t\treturn fsIdentification;\r\n\t}\r\n\treturn false;\r\n}\r\nforeignShipments_condition;";
            Enabled = true;
            Name = foreignShipments;
            Permission = RuleEditor;
            Result = "function foreignShipments_action(ir){\r\n\tLog.javascript.debug(\"Foriegn shipment. Adding plant finance approver.\");\t\t\r\n\tvar sapSource=\"\";\r\n\tvar companyCode=\"\";\r\n\tvar irPlant=\"\";\t\r\n\tvar countryCode=\"\";\r\n\tif(ir.getFieldValue(\"CompanyCode\")!=null){\r\n\t\tLog.javascript.debug(\"Company address not null;getting SAP source and company codes\");\r\n\t\tsapSource = ir.getDottedFieldValue(\"CompanyCode.SAPSource\");\r\n\t\tcompanyCode = ir.getDottedFieldValue(\"CompanyCode.UniqueName\");\r\n\t\tLog.javascript.debug(\"Company - \"+companyCode+\" SAP source - \"+sapSource);\r\n\t\tif(ir.getDottedFieldValue(\"CompanyCode.RegisteredAddress\")!=null){\r\n\t\t\tLog.javascript.debug(\"Company registered address not null\");\r\n\t\t\tvar regAddress = ir.getDottedFieldValue(\"CompanyCode.RegisteredAddress.PostalAddress\");\r\n\t\t\tif(regAddress!=null && regAddress.getFieldValue(\"Country\")!=null){\r\n\t\t\t\tcountryCode = regAddress.getDottedFieldValue(\"Country.UniqueName\");\r\n\t\t\t\tLog.javascript.debug(\"Reg Address Country code\" + countryCode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif(ir.getDefaultLineItem().getFieldValue(\"ShipTo\")!=null){\r\n\t\tLog.javascript.debug(\"Shipping address not null\");\r\n\t\tirPlant=ir.getDefaultLineItem().getDottedFieldValue(\"ShipTo.UniqueName\");\r\n\t\tLog.javascript.debug(\"Ship to - \"+irPlant);\r\n\t}\r\n\tLog.javascript.debug(\"Looking for the role\");\r\n\tif(!sapSource.equalsIgnoreCase(\"\")){\r\n\t\tif(!countryCode.equalsIgnoreCase(\"\") && !companyCode.equalsIgnoreCase(\"\") && !irPlant.equalsIgnoreCase(\"\")){\r\n\t\t\tvar approver = Role.getRole(\"FS_\"+sapSource+\"_\"+countryCode+\"_\"+companyCode+\"_\"+irPlant);\r\n\t\t\tif(approver!=null){\r\n\t\t\t\tLog.javascript.debug(\"Foreign Shipments approver role\" + approver.getUniqueName());\r\n\t\t\t\tvar required =true;\r\n\t\t\t\tvar reason_inv = \"Foreign Shipments require special approval\";\r\n\t\t\t\treturn ApprovalRequest.create(ir, approver, required, \"reason_inv\",reason_inv);\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\tif(!countryCode.equalsIgnoreCase(\"\") && !companyCode.equalsIgnoreCase(\"\")){\r\n\t\t\tvar approver = Role.getRole(\"FS_\"+sapSource+\"_\"+countryCode+\"_\"+companyCode);\r\n\t\t\tif(approver!=null){\r\n\t\t\t\tLog.javascript.debug(\"Foreign Shipments approver role\" + approver.getUniqueName());\r\n\t\t\t\tvar required =true;\r\n\t\t\t\tvar reason_inv = \"Foreign Shipments require special approval\";\r\n\t\t\t\treturn ApprovalRequest.create(ir, approver, required, \"reason_inv\",reason_inv);\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\tif(!countryCode.equalsIgnoreCase(\"\")){\r\n\t\t\tvar approver = Role.getRole(\"FS_\"+sapSource+\"_\"+countryCode);\r\n\t\t\tif(approver!=null){\r\n\t\t\t\tLog.javascript.debug(\"Foreign Shipments approver role\" + approver.getUniqueName());\r\n\t\t\t\tvar required =true;\r\n\t\t\t\tvar reason_inv = \"Foreign Shipments require special approval\";\r\n\t\t\t\treturn ApprovalRequest.create(ir, approver, required, \"reason_inv\",reason_inv);\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\tvar approver = Role.getRole(\"FS_\"+sapSource);\r\n\t\tif(approver!=null){\r\n\t\t\tLog.javascript.debug(\"Foreign Shipments approver role\" + approver.getUniqueName());\r\n\t\t\tvar required =true;\r\n\t\t\tvar reason_inv = \"Foreign Shipments require special approval\";\r\n\t\t\treturn ApprovalRequest.create(ir, approver, required, \"reason_inv\",reason_inv);\r\n\t\t}\r\n\t}\r\n}\r\nforeignShipments_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function invCustomTaxApprover_condition(approvable)\r\n{\r\n    if (approvable.getRequestedAction() == 2) {\r\n       //if requested action is to reject\r\n       return false;\r\n    }\r\nvar saptaxcode = null;\r\nvar saptaxflag = false;\r\n   if ((\"Rejecting\".equals(approvable.getStatusString())) || (\"Rejected\".equals(approvable.getStatusString())))\r\n      return false;\r\n    var ccode = approvable.getDottedFieldValue(\"CompanyCode.UniqueName\");\r\n\tLog.javascript.debug(\"Custom Approver companycode\" + ccode);\r\n    var vertexflag = approvable.getDottedFieldValue(\"CompanyCode.CallToVertexEnabled\")\r\n    Log.javascript.debug(\"Custom Approver vertexflag value\" + vertexflag);\r\n\tvar ccodeMattaxvalue = approvable.getDottedFieldValue(\"CompanyCode.DefaultTaxCodeForMaterial.SAPTaxCode\")\r\n\tLog.javascript.debug(\"Custom Approver companycode\" + ccodeMattaxvalue);\r\n\tvar ccodeServicetaxvalue = approvable.getDottedFieldValue(\"CompanyCode.DefaultTaxCodeForService.SAPTaxCode\")\r\n\tLog.javascript.debug(\"Custom Approver companycode\" + ccodeServicetaxvalue);\r\n    var lineItems = approvable.getLineItems();\r\n    Log.javascript.debug(\"filterLineItems \"+lineItems.size());\r\n    for (var i = 0, s = lineItems.size(); i < s ; i++)\r\n    {\r\n        var lineItem = lineItems.get(i);\r\n\t\tvar linetaxcode = lineItem.getFieldValue(\"TaxCode\");\r\n\t\tLog.javascript.debug(\"Line Item Taxcode \"+ linetaxcode);\r\n\t\tif(linetaxcode != null)\r\n\t\t{\r\n        var saptaxcode = lineItem.getDottedFieldValue(\"TaxCode.SAPTaxCode\");\r\n\t\tLog.javascript.debug(\" saptaxcode\"+ saptaxcode);\t\t\r\n\t\tif(saptaxcode.equals(ccodeMattaxvalue) || saptaxcode.equals(ccodeServicetaxvalue))\r\n\t\t  {\r\n\t\t   Log.javascript.debug(\"Inside true condition\");\r\n\t\t   saptaxflag = true;\r\n\t\t   break;\r\n\t\t  }\r\n\t   }\t\r\n   }\t\t\r\nif(((vertexflag == \"IR\" || vertexflag == \"PIB\") && saptaxflag)) \r\nreturn true;\r\nelse return false;\r\n\r\n}\r\n \r\ninvCustomTaxApprover_condition;";
            Enabled = true;
            Name = "Invoice Custom Tax Approver";
            Permission = RuleEditor;
            Result = "function invCustomTaxApprover_action (r)\r\n{\r\n\tvar name = \"SAP Invoice Tax Assessment\";\r\n\tvar reason = \"Tax module will automatically assess taxability of Invoice line items. No action required!\";\r\n\tvar ca = CustomApprover.get(r.getPartition(), name);\r\n\tLog.javascript.debug(\"Custom Approver (lookup): \" + ca);\r\n\tif (ca == null) {\r\n\t\t// construct a new custom approver\r\n\t\tca = new CustomApprover(r.getPartition(), name,\r\n\t\t\t\t\"config.java.customapprover.SAPCatTaxCustomApproverInv\");\r\n\t\tLog.javascript.debug(\"Custom Approver (new): \" + ca);\r\n\t\t\r\n\t}\r\n\treturn ApprovalRequest.create(r,ca,false,\"ruleReasons\",reason);\r\n}\r\ninvCustomTaxApprover_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function credit_supervisor_condition(approvable)\r\n{\r\n    if (approvable.getRequestedAction() == 2) \r\n    {\r\n       //if requested action is to reject\r\n       return false;\r\n    }\r\n   if ((\"Rejecting\".equals(approvable.getStatusString())) || (\"Rejected\".equals(approvable.getStatusString())))\r\n   {\r\n      return false;\r\n}\r\nvar comcode = approvable.getDottedFieldValue(\"CompanyCode.UniqueName\");\r\nLog.javascript.debug(\"Credit Supervisor Rule :: Company Code: \"+comcode);\r\nvar myList = new ArrayList();\r\nmyList = CatUtil.readDataFromFile(CatUtil.CC_FileName);\r\nLog.javascript.debug(\"Credit Supervisor Rule :: mylist: \"+myList);\r\nvar validCC = CatUtil.checkValueIsAvailable(comcode,myList);\r\nLog.javascript.debug(\"Credit Supervisor Rule :: validCC: \"+validCC);\r\nif((approvable.getTotalCost().getAmount() < 0) && validCC == 'true' )\r\n{\r\n\tLog.javascript.debug(\"Credit Supervisor Rule\");\r\nreturn true;\r\n}\r\nreturn false;\r\n} credit_supervisor_condition;";
            Enabled = true;
            FieldPath = LineItems;
            Name = "Credit Supervisor";
            Permission = RuleEditor;
            Result = "function credit_supervisor_action(ir)\r\n      {\r\n\r\n\t\t\tvar dataapprover = Role_DataMaintainer;\r\n\t\t\tvar datareason = \"Requester or Supervisor missing\";\r\n\t\t\tvar CatCSVIRRulesUtil = config.java.invoicing.vcsv1.CatCSVIRApprovalRulesUtil;\r\n\t\t\tLog.javascript.debug(\"-Ve Dollar Invoice\");\r\n\t\t\tvar reason = \"Requisitioner's supervisor has to Approve for Credit Invoices\";\r\n\t\t\tvar requester = CatCSVIRRulesUtil.getRequester(ir);\r\n\t\t\tvar supervisor = User2Supervisor(requester);\r\n\t\t\tif (supervisor instanceof User) {\r\n\t\t\t\tvar approver = supervisor;\r\n\t\t\t}\r\n\t\t\tvar required = true;\r\n\t\t\tif (approver!=null)\r\n\t\t\t{\r\n\t\t\t\treturn ApprovalRequest.create(ir, approver, required, \"reason\", reason);\r\n\t\t\t}\r\n\t\t\telse\r\n\r\n\t\t\t\treturn ApprovalRequest.create(ir,dataapprover,true,\"ruleReasons\",datareason);\r\n\r\n\t\t}\r\ncredit_supervisor_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "// 22/08/2013  IBM Jayashree B S  Q4 2013 - RSD103 - FDD 4/TDD 1.1 Add CSCL Customs Team into IR Approval Flow \r\n\r\nfunction CSCL_Customs_Team_condition (ir, LineItems)\r\n{\r\n\tvar isAdHoc = LineItems.getFieldValue(\"IsAdHoc\");\r\n\tvar flag = false;\r\n\r\n\tif((isCompanyApprovalRule(ir, \"IRCSCLTeam\")) && (isAdHoc == 'true')){\r\n\t Log.javascript.debug(\"CSCL_Customs_Team_condition:isAdHoc:\"+isAdHoc);\r\n\t flag = true;\r\n\t}\t\t\t\r\n\r\n\tvar companyCode= ir.getFieldValue(\"CompanyCode\");\r\n\tvar irCurrency = ir.getTotalInvoiced().getCurrency().getUniqueName();\r\n\tLog.javascript.debug(\"IR currency -\"+irCurrency);\r\n\r\n\tif(companyCode!=null){\r\n\tvar companyAddress = companyCode.getFieldValue(\"RegisteredAddress\");\r\n\t\tif(companyAddress!=null){\r\n\t\t\tLog.javascript.debug(\"Company address not null\");\r\n\t\t\tvar companyCountry = companyAddress.getPostalAddress().getCountry();\r\n\t\t\tvar compCurrency = companyCountry.getDefaultCurrency().getUniqueName();\r\n\t\t\tLog.javascript.debug(\"compCurrency\"+compCurrency);\r\n\t\t\tif(companyCountry!=null&&companyCountry.getDefaultCurrency().getUniqueName().equalsIgnoreCase(irCurrency)){\r\n\t\t\t    Log.javascript.debug(\"Both currencies are same\");\r\n\t\t\t\treturn false;\r\n\t\t\t} \t\t\t\t\r\n\t\t}\t\t\t\r\n\t}\t\r\n\r\n\treturn flag;\r\n}\r\nCSCL_Customs_Team_condition;";
            Enabled = true;
            FieldPath = LineItems;
            Name = "CSCL Customs Team";
            Permission = RuleEditor;
            Result = "function CSCL_Customs_Team_action (ir, LineItems)\r\n{\r\nvar reason = ResourceString.getString(\"cat.rulereasons\", \"CSCLTeamIR\");\r\nLog.javascript.debug(\"CSCL_Customs_Team_action: Enters\"+reason);\r\nvar datarole= Role_DataMaintainer;\r\nvar role = CatUtil.getRoleforSplitterRuleforInvoice(ir,\"CSCL\",LineItems);\r\nLog.javascript.debug(\"CSCL_Customs_Team_action: role is : \"+ role );\r\nvar required = isWatcher(ir,\"IRCSCLTeam\") ;\r\nLog.javascript.debug(\"CSCL_Customs_Team_action: required : \" + required);\r\nif (role!= null)\r\n{\r\nreturn ApprovalRequest.create(ir, role, required, \"cat.sap\", reason);\r\n}\r\nelse\r\n{\r\nreturn ApprovalRequest.create(ir, datarole, required, \"cat.sap\", reason);\r\n}\r\n}\t\t\r\nCSCL_Customs_Team_action;";
        }
    );
    Type = "ariba.invoicing.core.InvoiceReconciliation";
}
