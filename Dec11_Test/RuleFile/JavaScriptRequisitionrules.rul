/*
    Copyright (c) 1996-2013 Ariba, Inc.
    All rights reserved. Patents pending.

    Rules file.

    Generated on Mon Sep 09 11:00:37 CDT 2013

    Do not edit this file!
*/
{
    Chains = (
        {
            Classname = "ariba.approvable.rules.JavaScriptChainRule";
            Condition = "function supervisorChain_condition (r, ar)\r\n{\r\n\tvar result = false;\r\n\tvar type = ar.getType();\r\n\tvar approver = ar.getApprover();\r\n\tLog.javascript.debug(\"SUPER_CHAIN **** approver: \" + approver.getUniqueName());\r\n\tLog.javascript.debug(\"SUPER_CHAIN **** type: \" + type);\r\n\tif (isType(type,\"Supervisor\") && (approver instanceof User)) {\r\n\t\tvar eac = approver.getFieldValue(\"ExpenseApprovalCode\");\r\n\t\tLog.javascript.debug(\"SUPER_CHAIN **** approval code: \" + eac);\r\n\t\tif (eac != null) {\r\n\t\t\tvar limit = getUserExpenseLimitBD(eac);\r\n\t\t\tLog.javascript.debug(\"SUPER_CHAIN **** limit: \" + limit);\r\n\t\t\tif (limit != null) {\r\n\t\t\t\tvar total = r.getTotalCost().getApproxAmountInBaseCurrency();\r\n\t\t\t\tLog.javascript.debug(\"SUPER_CHAIN *** limit/total: \" + limit + \" / \" + total);\r\n\t\t\t\tif (limit.compareTo(total) < 0) {\r\n\t\t\t\t\tresult = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\t\t\t\t\r\nsupervisorChain_condition;";
            Enabled = true;
            Name = "SupervisorChain (CAT)";
            Permission = RuleEditor;
            Result = "function supervisorChain_action (r, ar)\r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_Supervisor\";\r\n\tvar required = true;\r\n\tvar supervisor = User2Supervisor(ar.getApprover());\r\n\tif (supervisor instanceof User) {\r\n\t\tLog.javascript.debug(\"SUPER_CHAIN ***** supervisor: \" + supervisor);\r\n\t\tapprover = supervisor;\r\n\t\treason = \"Chain_Supervisor\";\r\n\t}\r\n\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons\", reason);\r\n}\r\nsupervisorChain_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptChainRule";
            Condition = "/* Adds additional approvers after initial Buyer if threshold exceeded */\r\n\r\nfunction buyerCodeChain_condition (r, ar)\r\n{\r\n\tvar result = false;\r\n\tvar type = ar.getType();\r\n\tvar reasonKey = ar.getReasonKey();\r\n\tLog.javascript.debug(\"BUYERCODE_CHAIN **** type/reasonKey: \" + type + reasonKey);\r\n\tif (isType(type,\"BuyerCode\") && reasonKey.indexOf(\"EUR\") < 0) {\r\n    \tvar adhocTotal = getAdHocTotal(r.getLineItems());\r\n    \tvar key = null;\r\n    \tif (isType(type,\"BuyerCodeChain\")) {\r\n    \t\tkey = \"PurchMgrEUR\";\r\n\t\t} else {\r\n\t\t\tkey = \"PurchMgrUK\";\r\n\t\t}\r\n\t\tvar bdThreshold = getBuyerCodeThreshold(key);\r\n\t\tif (bdThreshold != null) {\r\n\t\t\tLog.javascript.debug(\"BUYERCODE_CHAIN **** bdThreshold \" + bdThreshold);\r\n\t\t\tresult = adhocTotal.compareTo(bdThreshold) > 0;\t\t\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\t\t\t\t\r\nbuyerCodeChain_condition;\r\n";
            Enabled = false;
            Name = "BuyerCodeChain (CAT)";
            Permission = RuleEditor;
            Result = "function buyerCodeChain_action (r, ar)\r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_BuyerCode\";\r\n\tvar required = true;\r\n\tvar key = null;\r\n\tvar type = ar.getType();\r\n\tif (isType(type,\"BuyerCodeChain\")) {\r\n\t\tkey = \"PurchMgrEUR\";\r\n\t} else {\r\n\t\tkey = \"PurchMgrUK\";\r\n\t}\r\n\tvar row = Rules_BuyerCodeApproversTable(key);\r\n\tif (!StringUtil.nullOrEmptyOrBlankString(row.get(0))) {\r\n\t\tvar principal = UniqueName2Principal(row.get(1),r.getPartition());\r\n\t\tif (principal != null) {\r\n\t\t\tapprover = principal;\r\n\t\t\treason = \"Chain_BuyerCode_\" + key;\r\n\t\t}\r\n\t}\r\n\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons.vcsv2\", reason);\r\n}\r\nbuyerCodeChain_action;";
        }
    );
    Classname = ariba.approvable.rules.RuleSet;
    Constraints = (
        {
            Classname = "ariba.approvable.rules.JavaScriptConstraint";
            Condition = "// ALL CONSTRAINTS\r\n\r\nfunction master_constraint (left, right)\r\n{\r\n\tvar lt = left.getType();\r\n\tvar rt = right.getType();\r\n\t\r\n\tif (isType(lt, \"OnBehalfOf\") && !isType(rt, \"NonCatalog\")) {\r\n\t\tLog.javascript.debug(\"CONSTRAINT ++++++ (1) OnBehalfOf\");\r\n\t\treturn true;\r\n\t}\t\r\n\tif (isType(lt, \"NonCatalog\") && !isType(rt, \"OnBehalfOf\")) {\r\n\t\tLog.javascript.debug(\"CONSTRAINT ++++++ (2) NonCatalog\");\r\n\t\treturn true;\r\n\t}\t\r\n\r\n\tif (isType(lt, \"CostCenter\")) {\r\n\t\tif (!isType(rt, \"CostCenter\") && !isType(rt,\"Supervisor\")) {\r\n\t\t\tLog.javascript.debug(\"CONSTRAINT ++++++ (3) CostCenter\");\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\tif (isType(lt, \"Supervisor\") && !isType(rt,\"CostCenter\")) {\r\n\t\tLog.javascript.debug(\"CONSTRAINT ++++++ (4b) Supervisor\");\t\r\n\t\treturn true;\r\n\t}\t\r\n\tif (isType(lt, \"Supervisor\") && isType(rt, \"SupervisorChain\")) {\r\n\t\tLog.javascript.debug(\"CONSTRAINT ++++++ (5) Supervisor / SuperChain\");\t\t\r\n\t\treturn true;\r\n\t}\t\t\r\n\tif (isType(lt,\"SupervisorChain\") && isType(rt,\"SupervisorChain\")) {\r\n\t\tLog.javascript.debug(\"CONSTRAINT ++++++ (5a) SupervisorChain\");\t\r\n\t\treturn (User2Supervisor(left.getApprover()) == right.getApprover()); \r\n\t}\t\r\n\tif (isType(rt,\"Hazmat\") && isType(lt,\"Supervisor\")) {\r\n\t\tLog.javascript.debug(\"CONSTRAINT ++++++ (6) Hazmat\");\t\t\t\r\n\t\treturn true;\r\n\t}\r\n\tif (isType(lt, \"CapitalReviewer\")) {\t\r\n\t\tLog.javascript.debug(\"CONSTRAINT ++++++ (7) CapitalReviewer\");\t\t\r\n\t\treturn true;\r\n\t}\t\t\r\n\treturn false;\r\n}\r\nmaster_constraint;";
            Enabled = true;
            Name = "All Constraints (CAT)";
            Permission = RuleEditor;
        }
    );
    Current = true;
    EditRule = "function edit_rule (user, a, fields, changes)\r\n{\r\n\tvar ApprovalLimitsFile = \"config/variants/vcsv2/data/CATApprovalLimits.csv\";\r\n\t\r\n\tvar TRANSCTR = user.hasPermission(\"CatTransactionCtr\");\r\n\tvar PURCHASE = user.hasPermission(\"CatPurchasing\");\r\n\tvar HAZMAT = user.hasPermission(\"CatHazmat\");\r\n\tvar CAPITAL = user.hasPermission(\"CatCapital\");\r\n\tvar OWNER = (user.equals(a.getPreparer()) || user.equals(a.getRequester()));\r\n\tvar RESUBMIT = Approvable.EditRequiresResubmit;\r\n\tvar ALLOW = Approvable.EditAllowedWithoutEffects;\t\r\n\tvar REJECT = Approvable.EditNotAllowed;\r\n\t\r\n\tLog.customer.debug(\"EDIT Rule - user: \" + user.getUniqueName());\r\n\tLog.customer.debug(\"EDIT Rule - preparer: \" + a.getPreparer().getUniqueName());\r\n\tLog.customer.debug(\"EDIT Rule - requester: \" + a.getRequester().getUniqueName());\r\n\r\n\tif (fields.isEmpty() && changes.isEmpty()) {\r\n\t\tLog.customer.debug(\"No change so Edit allowed!\");\r\n\t\treturn ALLOW; \r\n\t}\r\n\t\r\n\tif (!fields.isEmpty()) {\r\n\t\tvar size = fields.size();\r\n\t\tLog.customer.debug(\"EDIT Rule - Fields size(): \" + size);\t\t\r\n\t\tfor (var i = size-1; i >= 0; i--) {\r\n\t\t\tvar field = fields.get(i);\t\t\r\n\t\t\tLog.customer.debug(\"Field: \" + field);\r\n\t\t\tvar filepath = ApprovalLimitsFile;\t\r\n\t\t\tvar curr = \"GBP\";\t\r\n\t\t\tif (OWNER) {\r\n\t\t\t\tLog.customer.debug(\"EDIT Rule - OWNER\");\r\n\t\t\t\tif (field.equals(\"CommonCommodityCode\")\r\n\t\t\t\t\t   || field.equals(\"ShipTo\") || field.equals(\"CostCenterApprover\")\r\n\t\t\t\t\t   || field.equals(\"Supplier\") || field.equals(\"EmergencyBuy\")) {\r\n\t\t\t\t\treturn RESUBMIT;\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tif (field.equals(\"Comments\")) {\r\n\t\t\t\t\tvar rCosts = getOldAndNewCosts(changes);\r\n\t\t\t\t\tLog.customer.debug(\"EDIT - Original/New Cost: \" + rCosts[0] + \" / \" + rCosts[1]); \r\n\t\t\t\t\tif (rCosts[0] != null && rCosts[1] != null && rCosts[1].compareTo(rCosts[0]) > 0\r\n\t\t\t\t\t\t&& boundaryBreached(filepath,rCosts[0],rCosts[1],curr)) {\r\n\t\t\t\t\t\t\treturn RESUBMIT;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tLog.customer.debug(\"EDIT Rule - FINISHED OWNER CHECKS!\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t\tif (TRANSCTR) {\r\n\t\t\t\t\t\t\tLog.customer.debug(\"EDIT Rule - TRANSCTR\");\r\n\t\t\t\t\t\t\tif (field.equals(\"EmergencyBuy\") || field.equals(\"CommonCommodityCode\")\r\n\t\t\t\t\t\t\t\t\t|| field.equals(\"ShipTo\") || field.equals(\"NeedBy\")\r\n\t\t\t\t\t\t\t\t\t|| field.equals(\"AccountType\")  || field.equals(\"CostCenterApprover\")) {\r\n\t\t\t\t\t\t\t\treturn RESUBMIT;\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t\tif (field.equals(\"Comments\")) {\r\n\t\t\t\t\t\t\t\tvar rCosts = getOldAndNewCosts(changes);\r\n\t\t\t\t\t\t\t\tLog.customer.debug(\"EDIT - Original/New Cost: \" + rCosts[0] + \" / \" + rCosts[1]); \r\n\t\t\t\t\t\t\t\tif (rCosts[0] != null && rCosts[1] != null) {\t\r\n\t\t\t\t\t\t\t\t\tif (TRANSCTR && rCosts[1].compareTo(rCosts[0])!=0 && boundaryBreached(filepath,rCosts[0],rCosts[1],curr)) {\r\n\t\t\t\t\t\t\t\t\t\treturn RESUBMIT;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif (!TRANSCTR && rCosts[1].compareTo(rCosts[0]) > 0 && boundaryBreached(filepath,rCosts[0],rCosts[1],curr)) {\r\n\t\t\t\t\t\t\t\t\t\treturn RESUBMIT;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} \t\r\n\t\t\t\t}\r\n\t\t\t\telse if (HAZMAT) {\r\n\t\t\t\t\t\tLog.customer.debug(\"EDIT Rule - HAZMAT\");\r\n\t\t\t\t\t\tif (!field.equals(\"MSDSNumber\") && !field.equals(\"MSDSIncluded\") && \r\n\t\t\t\t\t\t!field.equals(\"ValidateAccounting\") && !field.equals(\"ValidateMFGAccountingMessage\") && \r\n\t\t\t\t\t\t!field.equals(\"Comments\") && !field.equals(\"NeedBy\") && !field.equals(\"LineLevelExternalComments\") && \r\n\t\t\t\t\t\t!field.equals(\"PreviousSafeApprovalRequests\") && !field.equals(\"CategoryTemplateLineItemVector\") &&\r\n\t\t\t\t\t\t!field.equals(\"Services\") && !field.equals(\"CommentCopy\") && !field.equals(\"Records\") && \r\n\t\t\t\t\t\t!field.equals(\"Attachments\") && !field.equals(\"AnalyzableAttributes\") && \r\n\t\t\t\t\t\t!field.equals(\"Text\") && !field.equals(\"Date\") && !field.equals(\"ExternalAttachment\") && !field.equals(\"ExternalComment\")) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//SDey , Ariba Inc : Fix for CurrencyConversionRate changes\r\n\t\t\t\t\t\tif(!costIncreased(changes) && (field.equals(\"Amount\") || field.equals(\"TotalCost\") || \r\n\t\t\t\t\t\tfield.equals(\"ConversionDate\") || field.equals(\"ApproxAmountInBaseCurrency\") || field.equals(\"AmountInReportingCurrency\") )){\r\n\t\t\t\t\t\t\tLog.customer.debug(\"EDIT Rule - HAZMAT : there is no increment of cost however currency conversion rate has changed\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\treturn REJECT;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//SDey , Ariba Inc : Fix for CurrencyConversionRate changes\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t} \t\r\n\t\t\t\t\t\tif (field.equals(\"Comments\") && costIncreased(changes)) {\r\n\t\t\t\t\t\t\treturn REJECT; \r\n\t\t\t\t\t\t} \t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\telse if (CAPITAL) {\r\n\t\t\t\t\t\tLog.customer.debug(\"EDIT Rule - CAPITAL\");\r\n\t\t\t\t\t\tif (!field.equals(\"CapitalOrderNumber\") && !field.equals(\"CostCenter\") && !field.equals(\"Project\") &&\r\n\t\t\t\t\t\t\t !field.equals(\"Account\") && !field.equals(\"SubAccount\") && !field.equals(\"ValidateAccounting\") && \r\n\t\t\t\t\t\t\t !field.equals(\"ValidateMFGAccountingMessage\") && !field.equals(\"Comments\") &&\r\n\t\t\t\t\t\t\t !field.equals(\"NeedBy\") && !field.equals(\"LineLevelExternalComments\") && \r\n\t\t\t\t\t\t\t !field.equals(\"PreviousSafeApprovalRequests\") && !field.equals(\"CategoryTemplateLineItemVector\") &&\r\n\t\t\t\t\t\t\t !field.equals(\"Services\") && !field.equals(\"CommentCopy\") && !field.equals(\"Records\") && \r\n\t\t\t\t\t\t\t !field.equals(\"Attachments\") && !field.equals(\"AnalyzableAttributes\") && \r\n\t\t\t\t\t\t\t !field.equals(\"Text\") && !field.equals(\"Date\") && !field.equals(\"ExternalAttachment\") && !field.equals(\"ExternalComment\")) {\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//SDey , Ariba Inc : Fix for CurrencyConversionRate changes \r\n\t\t\t\t\t\t\tif(!costIncreased(changes) && (field.equals(\"Amount\") || field.equals(\"TotalCost\") || \r\n\t\t\t\t\t\t\tfield.equals(\"ConversionDate\") || field.equals(\"ApproxAmountInBaseCurrency\") || field.equals(\"AmountInReportingCurrency\") )){\r\n\t\t\t\t\t\t\t\tLog.customer.debug(\"EDIT Rule - CAPITAL : there is no increment of cost however currency conversion rate has changed\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\treturn REJECT;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//SDey , Ariba Inc : Fix for CurrencyConversionRate changes\r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t\tif (field.equals(\"Comments\") && costIncreased(changes)) {\r\n\t\t\t\t\t\t        Log.customer.debug(\"EDIT Rule - CAPITAL field2 \" + field);\r\n\t\t\t\t\t\t\treturn REJECT; \r\n\t\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tLog.customer.debug(\"EDIT Rule - FINISHED ROLE CHECKS!\")\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (true) {  \r\n\t\t\tvar costDelta = getTotalCostChange(changes);\r\n\t\t\tLog.customer.debug(\"**costDelta**: \" + costDelta);\r\n\t\t\tvar nteDelta = getNTECostChange(changes);\r\n\t\t\tLog.customer.debug(\"**nteDelta**: \" + nteDelta);\r\n\t\t\tcostDelta = costDelta.add(nteDelta);\r\n\t\t\tLog.customer.debug(\"**Final costDelta**: \" + costDelta);\r\n\t\t\tif (costDelta.getAmount().compareTo(new java.math.BigDecimal(0)) > 0) {  \r\n\t\t\t\tLog.customer.debug(\"NET COST INCREASE, MUST RESUBMIT!\");\r\n\t\t\t\treturn RESUBMIT;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n\tif (TRANSCTR || PURCHASE || HAZMAT || CAPITAL || OWNER) {\r\n\t\tLog.customer.debug(\"EDIT Rule - POWER USER or OWNER + NO KEY FIELDS --> ALLOW EDIT!\")\r\n\t\treturn ALLOW;\r\n\t}\t\r\n\tLog.customer.debug(\"EDIT Rule - NO SPECIAL USER --> REJECT EDIT!\")\t\r\n\treturn REJECT;\r\n}\r\nedit_rule;\t\t\t\t    \r\n\r\n\r\nfunction getTotalCostChange (changeslist) \r\n{\r\n\tvar origCost = makeMoneyBase(0);\r\n\tvar finalCost = makeMoneyBase (0);\r\n\tfor (i = 0, numOfElements = changeslist.size(); i < numOfElements; i++) {\r\n\t\tvar element = changeslist.get(i);\r\n\t\tif (element.fieldName.equals(\"TotalCost\")) {\r\n\t\t\torigCost = element.old;\r\n\t\t\t\tbreak; \r\n\t\t}\r\n\t}\t\t\t\t\t \t\r\n\tfor (i = 1, numOfElements = changeslist.size(); i <= numOfElements; i++) {\r\n\t\tvar element = changeslist.get(numOfElements - i);\r\n\t\tif (element.fieldName == \"TotalCost\") {\r\n\t\t\tfinalCost = element.element;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n//\tLog.customer.debug(\"Original Cost: \" + origCost); \r\n//\tLog.customer.debug(\"Final Cost: \" + finalCost);\r\n\treturn ariba.basic.core.Money.subtract(finalCost,origCost);\r\n}\t\r\n\r\nfunction getNTECostChange (changeslist) \r\n{\t\t\r\n\tvar origNTE = makeMoneyBase(0);\r\n\tvar finalNTE = makeMoneyBase(0);\r\n\tfor (i = 0, numOfElements = changeslist.size(); i < numOfElements; i++) {\r\n\t\tvar element = changeslist.get(i);\r\n//\t\tLog.customer.debug(\"Element: \" + element); \t\t\t\r\n\t\tif (element.fieldName.equals(\"NTEAmount\")) {\r\n\t\t\tif (element.old != null) {\r\n\t\t\t\torigNTE = origNTE.add(element.old);\r\n//\t\t\t\tLog.customer.debug(\"Updated Original NTE: \" + origNTE);\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\tfor (i = 1, numOfElements = changeslist.size(); i <= numOfElements; i++) {\r\n\t\tvar element = changeslist.get(numOfElements - i);\r\n//\t\tLog.customer.debug(\"Element: \" + element); \t\r\n\t\tif (element.fieldName == \"NTEAmount\") {\r\n\t\t\tfinalNTE = finalNTE.add(element.element);\r\n//\t\t\tLog.customer.debug(\"Updated Final NTE: \" + finalNTE); \r\n\t\t}\r\n\t}\t\t\r\n//\tLog.customer.debug(\"TOTAL Original NTE: \" + origNTE); \r\n//\tLog.customer.debug(\"TOTAL Final NTE: \" + finalNTE);\r\n\treturn ariba.basic.core.Money.subtract(finalNTE,origNTE);\r\n}\r\n\r\n\r\nfunction getOldAndNewCosts (changes) \r\n{\r\n\tvar costs = [null, null];\r\n\tif (changes != null && !changes.isEmpty()) {\r\n\t\tfor (i = 0, numOfElements = changes.size(); i < numOfElements; i++) {\r\n\t\t\tvar element = changes.get(i);\r\n\t\t\tif (element.fieldName.equals(\"TotalCost\")) {\r\n\t\t\t\tcosts[0] = element.old;\r\n\t\t\t\tcosts[1] = element.element;\r\n\t\t\t\tbreak; \r\n\t\t\t}\r\n\t\t}\t\t\t\t\t \t\r\n\t}\r\n\treturn costs;\t\t\r\n}\r\n\r\nfunction boundaryBreached (filename, origCost, newCost, currency)\r\n{\r\n\tvar CatUtil2 = config.java.common.CatCommonUtil2;\r\n\tvar isBusted = false;\r\n\tif (filename != null) {\r\n\t\tvar thresholds = CatUtil2.getBoundaryThresholds(filename, origCost, currency);\r\n\t\tLog.customer.debug(\"EDIT - Lower Boundary: \" + thresholds[0]); \r\n\t\tLog.customer.debug(\"EDIT - Upper Boundary: \" + thresholds[1]); \r\n\t\tif (newCost.compareTo(thresholds[0]) < 0 || \r\n\t\t\tnewCost.compareTo(thresholds[1]) > 0) {\r\n\t\t\tisBusted = true;\r\n\t\t}\r\n\t}\r\n\treturn isBusted;\r\n}\r\n\r\n\r\nfunction costIncreased (changeslist) \r\n{\r\n\tvar hasIncrease = false;\r\n\tif (changeslist != null && !changeslist.isEmpty()) {\r\n\t\tvar origCost = makeMoneyBase(0);\r\n\t\tvar finalCost = makeMoneyBase (0);\r\n\t\tfor (i = 0, numOfElements = changeslist.size(); i < numOfElements; i++) {\r\n\t\t\tvar element = changeslist.get(i);\r\n\t\t\tif (element.fieldName.equals(\"TotalCost\")\t) {\r\n\t\t\t\torigCost = element.old;\r\n\t\t\t\t\tbreak; \r\n\t\t\t}\r\n\t\t}\t\t\t\t\t \t\r\n\t\tfor (i = 1, numOfElements = changeslist.size(); i <= numOfElements; i++) {\r\n\t\t\tvar element = changeslist.get(numOfElements - i);\r\n\t\t\tif (element.fieldName == \"TotalCost\") {\r\n\t\t\t\tfinalCost = element.element;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tLog.customer.debug(\"Original Cost: \" + origCost); \r\n\t\tLog.customer.debug(\"Final Cost: \" + finalCost);\r\n\t\tif (finalCost.compareTo(origCost) > 0) {\r\n\t\t\thasIncrease = true;\r\n\t\t}\r\n\t}\r\n\treturn hasIncrease;\r\n}";
    EditRulePermission = RuleEditor;
    EditRuleType = JavaScript;
    Edits = ( );
    Filters = (
        {
            Classname = "ariba.approvable.rules.JavaScriptFilterRule";
            Enabled = false;
            Filter = "function turnOffApprovals (r, ar, filtered)\r\n{\r\n\tvar type = ar.getType();\r\n\tif (!isType(type,\"CapitalReviewer\")) {\r\n//\tLog.javascript.debug(\"FILTER ******* WORKING\");\r\n\t\treturn ar; \r\n\t}\r\n\treturn null; \r\n}\r\nturnOffApprovals;";
            Name = "TurnOffApprovals (CAT)";
            Permission = RuleEditor;
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptFilterRule";
            Enabled = true;
            Filter = "function handleCapital (r, ar, filtered)\r\n{\t\r\n\tif (CatCaptialCondition.containsCapitalLine(r))\r\n\t{\r\n\t\tif ( !isType(ar.getType(),\"NonCatalog\") && !isType(ar.getType(),\"CapitalReviewer\") )\r\n\t\t{\r\n\t\t\tLog.javascript.debug(\"Handle CAPITAL Filter **** \");\r\n\t\t\tar.setApprovalRequired(false);\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn null;\r\n}\r\nhandleCapital;";
            Name = "HandleCapitalReviewer (CAT)";
            Permission = RuleEditor;
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptFilterRule";
            Enabled = false;
            Filter = "function handleEmergency (r, ar, filtered)\r\n{\t\r\n\tif ( ( (String)(r.getTotalCost().getCurrency().getDottedFieldValue(\"UniqueName\")) ).equalsIgnoreCase(\"GBP\") )\r\n\t{\r\n\t\tLog.javascript.debug(\"Handle Emergency Filter **** Total In GBP: \" + r.getTotalCost());\r\n\t\tLog.javascript.debug(\"Handle Emergency Filter **** UL In GBP: 25,000 GBP\");\r\n\r\n\t\tif (isEmergency(r) && !isType(ar.getType(),\"NonCatalog\")) \r\n\t\t{\r\n\t\t\tif (r.getTotalCost().compareTo(25000) <= 0) \r\n\t\t\t{\r\n\t\t\t\tLog.javascript.debug(\"Handle Emergency Filter **** Total is less than GBP UL\");\r\n\t\t\t\tar.setApprovalRequired(false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tLog.javascript.debug(\"Handle Emergency Filter **** Non-USD Requisition: \" );\r\n\t\tvar limitBD = new BigDecimal(25000.00);\r\n\t\tvar currency = Currency.getCurrencyFromUniqueName(\"GBP\");\r\n\t\t//var limit = new Money(25000, \"GBP\");\r\n\t\tvar limit = new ariba.basic.core.Money(limitBD, currency);\t\t\r\n\t\tif (limit != null) \r\n\t\t{\r\n\t\t\tvar total = r.getTotalCost().getApproxAmountInBaseCurrency();\r\n\t\t\tLog.javascript.debug(\"Handle Emergency Filter **** Total In BaseCurrency: \" + total);\r\n\t\t\tresult = limit.getApproxAmountInBaseCurrency();\r\n\t\t\tLog.javascript.debug(\"Handle Emergency Filter **** UL In BaseCurrency: \" + result);\r\n\t\t\tif (isEmergency(r) && !isType(ar.getType(),\"NonCatalog\")) \r\n\t\t\t{\r\n\t\t\t\tif (total.compareTo(result) <= 0) \r\n\t\t\t\t{\r\n\t\t\t\t\tLog.javascript.debug(\"Handle Emered)\r\n{\t\r\n\tif ( ( (String)(r.getTotalCost().getCurrency().getDottedFieldValue(\"UniqueName\")) ).equalsIgnoreCase(\"GBP\") )\r\n\t{\r\n\t\tLog.javascript.debug(\"Handle Emergency Filter **** Total In GBP: \" + r.getTotalCost());\r\n\t\tLog.javascript.debug(\"Handle Emergency Filter **** UL In GBP: 25,000 GBP\");\r\n\r\n\t\tif (isEmergency(r) && !isType(ar.getType(),\"NonCatalog\")) \r\n\t\t{\r\n\t\t\tif (r.getTotalCost().compareTo(25000) <= 0) \r\n\t\t\t{\red)\r\n{\t\r\n\tif ( ( (String)(r.getTotalCost().getCurrency().getDottedFieldValue(\"UniqueName\")) ).equalsIgnoreCase(\"GBP\") )\r\n\t{\r\n\t\tLog.javascript.debug(\"Handle Emergency Filter **** Total In GBP: \" + r.getTotalCost());\r\n\t\tLog.javascript.debug(\"Handle Emergency Filter **** UL In GBP: 25,000 GBP\");\r\n\r\n\t\tif (isEmergency(r) && !isType(ar.getType(),\"NonCatalog\")) \r\n\t\t{\r\n\t\t\tif (r.getTotalCost().compareTo(25000) <= 0) \r\n\t\t\t{\r\n\t\t\t\tLog.javascript.debug(\"Handle Emergency Filter **** Total is less than GBP UL\");\r\n\t\t\t\tar.setApprovalRequired(false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tLog.javascript.debug(\"Handle Emergency Filter **** Non-USD Requisition: \" );\r\n\t\tvar limitBD = new BigDecimal(25000.00);\r\n\t\tvar currency = Currency.getCurrencyFromUniqueName(\"GBP\");\r\n\t\t//var limit = new Money(25000, \"GBP\");\r\n\t\tvar limit = new ariba.basic.core.Money(limitBD, currency);\t\t\r\n\t\tif (limit != null) \r\n\t\t{\r\n\t\t\tvar total = r.getTotalCost().getApproxAmountInBaseCurrency();\r\n\t\t\tLog.javascript.debug(\"Handle Emergency Filter **** Total In BaseCurrency: \" + total);\r\n\t\t\tresult = limit.getApproxAmountInBaseCurrency();\r\n\t\t\tLog.javascript.debug(\"Handle Emergency Filter **** UL In BaseCurrency: \" + result);\r\n\t\t\tif (isEmergency(r) && !isType(ar.getType(),\"NonCatalog\")) \r\n\t\t\t{\r\n\t\t\t\tif (total.compareTo(result) <= 0) \r\n\t\t\t\t{\r\n\t\t\t\t\tLog.javascript.debug(\"Handle Emered)\r\n{\t\r\n\tif ( ( (String)(r.getTotalCost().getCurrency().getDottedFieldValue(\"UniqueName\")) ).equalsIgnoreCase(\"GBP\") )\r\n\t{\r\n\t\tLog.javascript.debug(\"Handle Emergency Filter **** Total In GBP: \" + r.getTotalCost());\r\n\t\tLog.javascript.debug(\"Handle Emergency Filter **** UL In GBP: 25,000 GBP\");\r\n\r\n\t\tif (isEmergency(r) && !isType(ar.getType(),\"NonCatalog\")) \r\n\t\t{\r\n\t\t\tif (r.getTotalCost().compareTo(25000) <= 0) \r\n\t\t\t{\r\n\t\t\t\tLog.javascript.debug(\"Handle Emergency Filter **** Total is less than GBP UL\");\r\n\t\t\t\tar.setApprovalRequired(false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tLog.javascript.debug(\"Handle Emergency Filter **** Non-USD Requisition: \" );\r\n\t\tvar limitBD = new BigDecimal(25000.00);\r\n\t\tvar currency = Currency.getCurrencyFromUniqueName(\"GBP\");\r\n\t\t//var limit = new Money(25000, \"GBP\");\r\n\t\tvar limit = new ariba.basic.core.Money(limitBD, currency);\t\t\r\n\t\tif (limit != null) \r\n\t\t{\r\n\t\t\tvar total = r.getTotalCost().getApproxAmountInBaseCurrency();\r\n\t\t\tLog.javascript.debug(\"Handle Emergency Filter **** Total In BaseCurrency: \" + total);\r\n\t\t\tresult = limit.getApproxAmountInBaseCurrency();\r\n\t\t\tLog.javascript.debug(\"Handle Emergency Filter **** UL In BaseCurrency: \" + result);\r\n\t\t\tif (isEmergency(r) && !isType(ar.getType(),\"NonCatalog\")) \r\n\t\t\t{\r\n\t\t\t\tif (total.compareTo(result) <= 0) \r\n\t\t\t\t{\r\n\t\ted)\r\n{\t\r\n\tif ( ( (String)(r.getTotalCost().getCurrency().getDottedFieldValue(\"UniqueName\")) ).equalsIgnoreCase(\"GBP\") )\r\n\t{\r\n\t\tLog.javascript.debug(\"Handle Emergency Filter **** Total In GBP: \" + r.getTotalCost());\r\n\t\tLog.javascript.debug(\"Handle Emergency Filter **** UL In GBP: 25,000 GBP\");\r\n\r\n\t\tif (isEmergency(r) && !isType(ar.getType(),\"NonCatalog\")) \r\n\t\t{\r\n\t\t\tif (r.getTotalCost().compareTo(25000) <= 0) \r\n\t\t\t{\r\n\t\t\t\tLog.javascript.debug(\"Handle Emergency Filter **** Total is less than GBP UL\");\r\n\t\t\t\tar.setApprovalRequired(false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tLog.javascript.debug(\"Handle Emergency Filter **** Non-USD Requisition: \" );\r\n\t\tvar limitBD = new BigDecimal(25000.00);\r\n\t\tvar currency = Currency.getCurrencyFromUniqueName(\"GBP\");\r\n\t\t//var limit = new Money(25000, \"GBP\");\r\n\t\tvar limit = new ariba.basic.core.Money(limitBD, currency);\t\t\r\n\t\tif (limit != null) \r\n\t\t{\r\n\t\t\tvar total = r.getTotalCost().getApproxAmountInBaseCurrency();\r\n\t\t\tLog.javascript.debug(\"Handle Emergency Filter **** Total In BaseCurrency: \" + total);\r\n\t\t\tresult = limit.getApproxAmountInBaseCurrency();\r\n\t\t\tLog.javascript.debug(\"Handle Emergency Filter **** UL In BaseCurrency: \" + result);\r\n\t\t\tif (isEmergency(r) && !isType(ar.getType(),\"NonCatalog\")) \r\n\t\t\t{\r\n\t\t\t\tif (total.compareTo(result) <= 0) \r\n\t\t\t\t{\r\n\t\t\t\t\tLog.javascript.debug(\"Handle Emered)\r\n{\t\r\n\tif ( ( (String)(r.getTotalCost().getCurrency().getDottedFieldValue(\"UniqueName\")) ).equalsIgnoreCase(\"GBP\") )\r\n\t{\r\n\t\tLog.javascript.debug(\"Handle Emergency Filter **** Total In GBP: \" + r.getTotalCost());\r\n\t\tLog.javascript.debug(\"Handle Emergency Filter **** UL In GBP: 25,000 GBP\");\r\n\r\n\t\tif (isEmergency(r) && !isType(ar.getType(),\"NonCatalog\")) \r\n\t\t{\r\n\t\t\tif (r.getTotalCost().compareTo(25000) <= 0) \r\n\t\t\t{\r\n\t\t\t\tLog.javascript.debug(\"Handle Emergency Filter **** Total is less than GBP UL\");\r\n\t\t\t\tar.setApprovalRequired(false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tLog.javascript.debug(\"Handle Emergency Filter **** Non-USD Requisition: \" );\r\n\t\tvar limitBD = new BigDecimal(25000.00);\r\n\t\tvar currency = Currency.getCurrencyFromUniqueName(\"GBP\");\r\n\t\t//var limit = new Money(25000, \"GBP\");\r\n\t\tvar limit = new ariba.basic.core.Money(limitBD, currency);\t\t\r\n\t\tif (limit != null) \r\n\t\t{\r\n\t\t\tvar total = r.getTotalCost().getApproxAmountInBaseCurrency();\r\n\t\t\tLog.javascript.debug(\"Handle Emergency Filter **** Total In BaseCurrency: \" + total);\r\n\t\t\tresult = limit.getApproxAmountInBaseCurrency();\r\n\t\t\tLog.javascript.debug(\"Handle Emergency Filter **** UL In BaseCurrency: \" + result);\r\n\t\t\tif (isEmergency(r) && !isType(ar.getType(),\"NonCatalog\")) \r\n\t\t\t{\r\n\t\t\t\tif (total.compareTo(result) <= 0) \r\n\t\t\t\t{\r\n\t\t\t\t\tLog.javascript.debug(\"Handle Emergency Filter **** Total is less than UL\");\r\n\t\t\t\t\tar.setApprovalRequired(false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn null;\r\n}\r\nhandleEmergency;";
            Name = "HandleEmergency (CAT)";
            Permission = RuleEditor;
        }
    );
    LoadDB = true;
    Name = "Java Script Requisition rules";
    Simples = (
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "/*   **NOTE**  Rule only used during Development to load common functions ahead of other rules. Move these functions to BaseObject.js as permanent location */\r\n\r\nfunction baseobject_condition (r)\r\n{ \r\nreturn false;\r\n}\r\nbaseobject_condition;\r\n\r\n//  DEFINITIONS\r\n\r\nvar Fmt = ariba.util.core.Fmt;\r\nvar Base = ariba.base.core.Base;\r\nvar ListUtil = ariba.util.core.ListUtil;\r\nvar StringUtil = ariba.util.core.StringUtil;\r\nvar CommonUser = ariba.common.core.User;\r\nvar ArrayList = java.util.ArrayList;\r\nvar Iterator = java.util.Iterator;\r\nvar BigDecimal = java.math.BigDecimal;\r\nvar BooleanFormatter = ariba.util.formatter.BooleanFormatter;\r\nvar BigDecimalFormatter = ariba.util.formatter.BigDecimalFormatter;\r\nvar StringBuffer = java.lang.StringBuffer;\r\nvar Currency = ariba.basic.core.Currency;\r\nvar CatUtil = config.java.common.CatCommonUtil;\r\nvar CatUtil2 = config.java.common.CatCommonUtil2;\r\nvar CatCaptialCondition = config.java.condition.CatPLICContainsCapitalLineItem;\r\nvar CatDirectOrder = config.java.ordering.vcsv2.CatMFGAllDirectOrder;\r\n\r\n\r\n//  VARIABLES \r\n\r\nvar ShipToList = new ArrayList();\r\nvar Role_DataMaintainer = Role.getRole(\"Data Maintainer\");\r\nvar Role_TransCenterUK = Role.getRole(\"Transaction Center (mfg1)\"); \r\nvar Rules_HazmatUOMTable = MakeCSVTable(\"data/CATHazmatUnitOfMeasure.csv\",ListUtil.list(\" \"));\r\nvar Rules_ApprovalLimitsTable = MakeCSVTable(\"data/CATApprovalLimitsUK.csv\", ListUtil.list(\"\",\"0\",\"\"));\r\nvar Rules_HazmatApproversTable = MakeCSVTable(\"data/CATHazmatApprovers.csv\", ListUtil.list(\"\",\"\"));\r\nvar Rules_SpecialCategoryApprovalsTable = MakeCSVTable(\"data/CATSpecialCategoryApprovals.csv\", ListUtil.list(\"\",\"\",\"\"));\r\nvar Rules_BuyerCodeThresholdTable = MakeCSVTable(\"data/CATBuyerCodeThresholds.csv\", ListUtil.list(\"\",\"0\",\"\"));\r\nvar Rules_BuyerCodeApproversTable = MakeCSVTable(\"data/CATBuyerCodeApprovers.csv\", ListUtil.list(\"\",\"\"));\r\n\r\n\r\n//  FUNCTIONS \r\n\r\nfunction isEmergency (r)\r\n{\r\n\treturn BooleanFormatter.getBooleanValue(r.getFieldValue(\"EmergencyBuy\"));\r\n}\r\n\r\nfunction isType (type, name) \r\n{\r\n    return type.startsWith(name);\r\n}\r\n\r\nfunction isTypeEnding (type, string)\r\n{\r\n    return type.endsWith(string);\r\n}\r\n\r\nfunction IsAdHoc (li) \r\n{\r\n    return li.getIsAdHoc();\r\n}\r\n\r\nfunction getUserExpenseLimit (approvalcode)\r\n{\r\n\tvar value  = makeMoneyBase(0);\r\n\tvar row = Rules_ApprovalLimitsTable(approvalcode);\r\n\tLog.javascript.debug(\"UserExpenseLimit **** row: \" + row);\r\n\tif (!StringUtil.nullOrEmptyOrBlankString(row)) {\r\n\t\tvalue = makeMoneyBase(parseInt(row.get(1)));\r\n\t}\r\n\treturn value;\r\n}\r\n\r\nfunction getUserExpenseLimitBD (approvalcode)\r\n{\r\n\tvar result = null;\r\n\tvar row = Rules_ApprovalLimitsTable(approvalcode);\t\r\n    if (!StringUtil.nullOrEmptyOrBlankString(row.get(0))) {\t\r\n\t\tvar limitBD = new BigDecimal(row.get(1));\r\n\t\tvar currency = Currency.getCurrencyFromUniqueName(row.get(2));\r\n\t\tLog.javascript.debug(\"SUPERCHAIN_HELPER **** limitBD/currency: \" + limitBD + currency);\r\n\t\tif (limitBD != null && currency != null) {\r\n\t\t\tvar limit = new Money(limitBD, currency);\r\n\t\t\tif (limit != null) {\r\n\t\t\t\tresult = limit.getApproxAmountInBaseCurrency();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nfunction getUserAccounting (user, partition)\r\n{\r\n\tvar acctng = null;\r\n\tvar partuser = CommonUser.getPartitionedUser(user, partition);\r\n\tif (partuser != null) {\r\n\t\tacctng = partuser.getAccounting();\r\n\t}\r\n\treturn acctng;\r\n}\r\n\r\nfunction getCapitalRole(approverKey, facility, partitionName) \r\n{\r\n\tvar approver = null;\r\n\tvar roleUN =  new StringBuffer(approverKey);   // space is intentional\r\n\tLog.javascript.debug(\"CAPITAL **** roleUN: \" + roleUN.toString());\r\n\troleUN.append(\" (\").append(partitionName).append(\"-\").append(facility).append(\")\");\r\n\tLog.javascript.debug(\"CAPITAL **** roleUN: \" + roleUN.toString());\r\n\tvar role = Role.getRole(roleUN.toString());\r\n\tif (role != null) {\r\n\t\tapprover = role;\r\n\t}\r\n\treturn approver;\r\n}\r\n\r\nfunction isHazmatUOM (unique)\r\n{\r\n\tvar suspectUOM = false;\r\n\tvar row = Rules_HazmatUOMTable(unique);\r\n\tLog.javascript.debug(\"HAZMAT **** row: \" + row);\r\n\tif (!StringUtil.nullOrEmptyOrBlankString(row.get(0))) {\r\n\t\tsuspectUOM = true;\r\n\t}\r\n\treturn suspectUOM;\r\n}\r\n\r\n\r\nfunction getAdHocTotal (lines) \r\n{\r\n\tvar total = new BigDecimal(\"0\");\r\n\tif (lines != null && !lines.isEmpty()) {\r\n\t\tvar size = lines.size();\r\n\t\tfor (i = 0; i<size; i++) {\r\n\t\t\tvar line = lines.get(i);\r\n\t\t\tif (line.getIsAdHoc()) {\r\n\t\t\t\ttotal = total.add(line.getAmount().getApproxAmountInBaseCurrency());\r\n\t\t\t}                \r\n\t\t}\r\n\t}\r\n\treturn total;\r\n}\r\n\r\nfunction getBuyerCodeThreshold(key) \r\n{\r\n\tvar result = null;\r\n    var row = Rules_BuyerCodeThresholdTable(key);\r\n    if (!StringUtil.nullOrEmptyOrBlankString(row.get(0))) {\r\n\t\tvar thresholdBD = new BigDecimal(row.get(1));\r\n\t\tvar currency = Currency.getCurrencyFromUniqueName(row.get(2));\r\n\t\tLog.javascript.debug(\"BUYERCODE_HELPER **** thresholdBD/currency: \" + thresholdBD + currency);\r\n\t\tif (thresholdBD != null && currency != null) {\r\n\t\t\tthreshold = new Money(thresholdBD, currency);\r\n\t\t\tif (threshold != null) {\r\n\t\t\t\tresult = threshold.getApproxAmountInBaseCurrency();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nfunction costIncreased (changeslist) \r\n{\r\n\tvar hasIncrease = false;\r\n\tif (changeslist != null && !changeslist.isEmpty()) {\r\n\t\tvar origCost = makeMoneyBase(0);\r\n\t\tvar finalCost = makeMoneyBase (0);\r\n\t\tfor (i = 0, numOfElements = changeslist.size(); i < numOfElements; i++) {\r\n\t\t\tvar element = changeslist.get(i);\r\n\t\t\tif (element.fieldName.equals(\"TotalCost\")\t) {\r\n\t\t\t\torigCost = element.old;\r\n\t\t\t\t\tbreak; \r\n\t\t\t}\r\n\t\t}\t\t\t\t\t \t\r\n\t\tfor (i = 1, numOfElements = changeslist.size(); i <= numOfElements; i++) {\r\n\t\t\tvar element = changeslist.get(numOfElements - i);\r\n\t\t\tif (element.fieldName == \"TotalCost\") {\r\n\t\t\t\tfinalCost = element.element;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tLog.customer.debug(\"Original Cost: \" + origCost); \r\n\t\tLog.customer.debug(\"Final Cost: \" + finalCost);\r\n\t\tif (finalCost.compareTo(origCost) > 0) {\r\n\t\t\thasIncrease = true;\r\n\t\t}\r\n\t}\r\n\treturn hasIncrease;\r\n}\r\n";
            Enabled = true;
            Name = "BaseObject Functions (CAT)";
            Permission = RuleEditor;
            Result = "function baseobject_action(r)\r\n{ \r\nreturn null;\r\n}\r\nbaseobject_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function onBehalfOf_condition (r) \r\n{\r\n    return r.getRequester() != r.getPreparer();\r\n}\r\nonBehalfOf_condition;";
            Enabled = true;
            Name = "OnBehalfOf (CAT)";
            Permission = RuleEditor;
            Result = "function onBehalfOf_action (r) \r\n{\r\n\treturn ApprovalRequest.create(r, r.getRequester(), false, \"cat.rulereasons.vcsv2\", \"OnBehalfOf\");\r\n}\r\nonBehalfOf_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function customShipTo_condition (r, AdapterSource)\r\n{\r\n\tLog.javascript.debug(\"CustomShipTo **** adaptersoure: \" + AdapterSource);\r\n\treturn StringUtil.nullOrEmptyOrBlankString(AdapterSource);\r\n}\r\ncustomShipTo_condition;";
            Enabled = false;
            FieldPath = LineItems.ShipTo.AdapterSource;
            Name = "CustomShipTo (CAT)";
            Permission = RuleEditor;
            Result = "function customShipTo_action (r, AdapterSource) \r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_Supervisor\";\r\n\tvar required = false;\r\n\tvar supervisor = User2Supervisor(r.getRequester());\r\n\tif (supervisor != null) {\r\n\t\tapprover = supervisor;\r\n\t\treason = \"CustomShipTo\";\r\n\t}\r\n\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons.vcsv2\", reason);\r\n}\r\ncustomShipTo_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "var isAdhoc;\r\n\r\nfunction noncatalog_condition (r) \r\n{\r\n\tisAdhoc = false;\r\n  \tvar isMissing = false;\r\n  \tvar lines = r.getLineItems();\r\n  \tvar size = lines.size();\r\n  \twhile (size > 0) {\r\n  \t\tvar rli = lines.get(size-1);\r\n  \t\tif (rli.getIsAdHoc() && !(rli.getIsFromCatalog())) {\r\n  \t\t\tisAdhoc = true;\r\n  \t\t\tbreak;\r\n  \t\t}\r\n  \t\tif (!isMissing && rli.getFieldValue(\"BuyerCode\") == null) {\r\n  \t\t\tisMissing = true;\r\n  \t\t}\r\n  \t\tsize--;\r\n  \t}  \t\r\n  \treturn (isAdhoc || isMissing);\r\n}\r\nnoncatalog_condition;";
            Enabled = true;
            Name = "NonCatalog (CAT)";
            Permission = RuleEditor;
            Result = "function noncatalog_action (r) \r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_General\"; \r\n\tvar required = true;\r\n\tif (Role_TransCenterUK != null) {\r\n\t\tapprover = Role_TransCenterUK;\r\n\t\treason = \"NonCatalog\";\r\n\t}\r\n\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons.vcsv2\", reason);\r\n}\r\nnoncatalog_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "/*  Adds Capital REVIEWER if requisition contains capital based on \r\nAccounting Facility of Requester. */\r\n\r\n\r\nfunction capitalReviewer_condition (r)\r\n{\r\n\treturn CatCaptialCondition.containsCapitalLine(r);\r\n}\r\ncapitalReviewer_condition;";
            Enabled = true;
            Name = "CapitalReviewer (CAT)";
            Permission = RuleEditor;
            Result = "function capitalReviewer_action (r)\r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_Capital\";\r\n\tvar required = true;\r\n\tvar sfac = r.getDottedFieldValue(\"SiteFacility.UniqueName\");\r\n\tLog.javascript.debug(\"CAPITAL REVIEWER **** site facility: \" + sfac);\r\n\tvar partName = r.getPartition().getName();\r\n\tvar role = getCapitalRole(\"Capital Reviewer\", sfac, partName);\r\n\r\n\tLog.javascript.debug(\"CAPITAL REVIEWER **** role: \" + role);\r\n\tif (role != null) {\r\n\t\tapprover = role;\r\n\t\treason = \"Capital_Reviewer\";\r\n\t}\r\n\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons.vcsv2\", reason);\r\n}\r\ncapitalReviewer_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function designatedApprover_condition (r, SplitAccountings)\r\n{\r\n\tvar sa = SplitAccountings;\t\r\n\tvar cc = sa.getFieldValue(\"CostCenter\");\t\r\n\tvar ccApprover = sa.getFieldValue(\"CostCenterApprover\");\r\n\tLog.javascript.debug(\"COSTCTRAPPROVER *** cc approver: \" + ccApprover);\r\n\t\r\n\treturn (cc != null && ccApprover != null)\r\n}\r\ndesignatedApprover_condition;";
            Enabled = true;
            FieldPath = LineItems.Accountings.SplitAccountings;
            Name = "CostCenterApprover (CAT)";
            Permission = RuleEditor;
            Result = "function designatedApprover_action (r, SplitAccountings)\r\n{\r\n\tvar sa = SplitAccountings;\r\n\tvar reason = Fmt.Sil(\"cat.rulereasons.vcsv2\", \"DesignatedCCApprover\");\t\r\n\tvar approver = sa.getFieldValue(\"CostCenterApprover\");\r\n\tvar cc = sa.getFieldValue(\"CostCenter\");\r\n\tif (cc != null) {\r\n\t\tvar code = cc.getFieldValue(\"CostCenterCode\");\r\n\t\tif (code != null) {\r\n\t\t\treason = Fmt.S(reason, code);\r\n\t\t}\r\n\t}\r\n\r\n\treturn ApprovalRequest.create(r, approver, true, \"cat.rulereasons.vcsv2\", reason);\r\n}\t\t\r\ndesignatedApprover_action; \t\t";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function supervisor_condition (r)\r\n{\r\n\treturn true;\r\n}\r\nsupervisor_condition;";
            Enabled = true;
            Name = "Supervisor (CAT)";
            Permission = RuleEditor;
            Result = "function supervisor_action (r)\r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_Supervisor\";\r\n                var required = true;\r\n\tvar supervisor = User2Supervisor(r.getRequester());\t\r\nif (supervisor != null) {\r\n\tLog.javascript.debug(\"SUPERVISOR **** supervisor: \" + supervisor);\r\n\t\tvar puser = CommonUser.getPartitionedUser(r.getRequester(), r.getPartition());\r\n\t\tLog.javascript.debug(\"SUPERVISOR **** part user: \" + puser);\t\t\r\n\t\tif (puser != null) {\r\n\t\t\tvar code = puser.getFieldValue(\"ExpenseApprovalCode\");\r\n\t\t\tLog.javascript.debug(\"SUPERVISOR **** approval code: \" + code);\r\n\t\t\tif (code != null) {\r\n\t\t\t\tvar limit = getUserExpenseLimit(code);\r\n\t\t\t\tLog.javascript.debug(\"SUPERVISOR **** limit: \" + limit);\r\n\t\t\t\tif (limit != null) {\r\n\t\t\t\t\tapprover = supervisor;\r\n\t\t\t\t\tvar total = r.getTotalCost();\r\n\t\t\t\t\tLog.javascript.debug(\"SUPERVISOR **** total: \" + total);\r\n\t\t\t\t\t// must add total of any Not-to-Exceed line items\r\n//\t\t\t\t\tvar nte_total = config.java.common.CatCommonUtil.getNotToExceedTotal(r.getLineItems());\r\n\t\t\t\t\ttotal = ariba.basic.core.Money.add(total, config.java.common.CatCommonUtil.getNotToExceedTotal(r.getLineItems()));\r\n\t\t\t\t\tLog.javascript.debug(\"SUPERVISOR *** NEW total (w/NTE Prices): \" + total);\t\t\r\n\t\t\t\t\tLog.javascript.debug(\"SUPERVISOR **** limit compareTo total: \" + limit.compareTo(total));\t\r\n\t\t\t\t\tif (limit.compareTo(total) > -1) { \r\n\t\t\t\t\t\trequired = false;\r\n\t\t\t\t\t\treason = \"Supervisor_Watcher\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treason = \"Supervisor_Approver\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons\", reason);\r\n}\t\t\r\nsupervisor_action; \t\r\n";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "/*  If CommodityCode is in CSV list, then adds approver for the category (site specific)*/\r\n\r\n\r\nfunction specialCategory_condition (r,ccc)\r\n{\r\n\tif (ccc.length() > 5) {\r\n\t\tccc = ccc.substring(0,6);\r\n\t}\r\n\tLog.javascript.debug(\"SPECIAL CATEGORY *** CCC used: \" + ccc);\r\n\tvar row = Rules_SpecialCategoryApprovalsTable(ccc);\r\n\tLog.javascript.debug(\"SPECIAL CATEGORY *** row: \" + row);\t\t\r\n\tif (!StringUtil.nullOrEmptyOrBlankString(row.get(0))) {\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\t\r\n}\r\nspecialCategory_condition;";
            Enabled = false;
            FieldPath = "LineItems.Description.CommonCommodityCode.UniqueName";
            Name = "SpecialCategory (CAT)";
            Permission = RuleEditor;
            Result = "function specialCategory_action (r,ccc)\r\n{\r\n\tif (ccc.length() > 5) {\r\n\t\tccc = ccc.substring(0,6);\r\n\t}\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_SpecialCategory\";\r\n\tvar required = true;\r\n\tvar site = r.getFieldValue(\"SiteFacility\");\r\n\tLog.javascript.debug(\"SPECIAL CATEGORY *** site facility: \" + site);\r\n\tvar catKey = Rules_SpecialCategoryApprovalsTable(ccc).get(2);\r\n\tLog.javascript.debug(\"SPECIAL CATEGORY *** catKey: \" + catKey);\r\n\tif (!StringUtil.nullOrEmptyOrBlankString(catKey)) {\r\n\t\tvar roleUN = new StringBuffer(\"Category Approver (mfg1-\");\r\n\t\troleUN.append(catKey).append(\"-\").append(site.getUniqueName()).append(\")\");\r\n\t\tLog.javascript.debug(\"SPECIAL CATEGORY *** roleUN: \" + roleUN);\r\n\t\tvar role = Role.getRole(roleUN.toString());\r\n\t\tif (role != null) {\r\n\t\t\tapprover = role;\r\n\t\t\treason = \"SpecialCategory_\" + catKey;\r\n\t\t\tvar tf = Rules_SpecialCategoryApprovalsTable(ccc).get(1);\r\n\t\t\tLog.javascript.debug(\"SPECIAL CATEGORY *** required(tf): \" + tf);\r\n\t\t\tif (tf.equalsIgnoreCase(\"false\")) {\r\n\t\t\t\trequired = false; \r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t}\r\n\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons.vcsv2\", reason);\r\n}\r\nspecialCategory_action; ";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function hazmat_condition (r, LineItems)\r\n{\r\n\tvar result = false;\r\n\tvar linecount = r.getLineItemsCount();\r\n\tLog.javascript.debug(\"HAZMAT **** line count: \" + linecount);\r\n\t\r\n\tvar isHazmat = LineItems.getFieldValue(\"IsHazmat\");\r\n\tLog.javascript.debug(\"HAZMAT **** isHazmat: \" + isHazmat);\r\n\t\r\n\t\tif (isHazmat != null && isHazmat.booleanValue()) {\t\t\t\r\n\t\t\r\n\t\tvar shipto = LineItems.getShipTo().getUniqueName();\r\n\t\tif (!ShipToList.contains(shipto)) {\r\n\t\t\tLog.javascript.debug(\"HAZMAT **** Adding to ShipToList\");\r\n\t\t\t//ShipToList.add(shipto);\r\n                                                return true;\r\n\t\t}\r\n\t}\r\n\tLog.javascript.debug(\"HAZMAT **** ShipToList size: \" + ShipToList.size());\r\n\tif (linecount == LineItems.getNumberInCollection()) {\r\n\t\tShipToList.clear();\r\n\t\tLog.javascript.debug(\"HAZMAT **** Clearing ShipToList: \" + ShipToList.size());\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nhazmat_condition;";
            Enabled = true;
            FieldPath = LineItems;
            Name = "Hazmat (CAT)";
            Permission = RuleEditor;
            Result = "function hazmat_action (r, LineItems)\r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_Hazmat\";\r\n\tvar required = true;\r\n\tvar shipto = LineItems.getShipTo().getUniqueName();\r\n\tLog.javascript.debug(\"HAZMAT **** shipTo Unique: \" + shipto);\r\n    var row = Rules_HazmatApproversTable(shipto);\r\n    var approverNames = null;\r\n    var value = row.get(1);\r\n    if (value != \"\" && !StringUtil.nullOrEmptyOrBlankString(value)) {\r\n    \tapproverNames = value;\r\n    }\r\n    if (approverNames != null) {\r\n\t\tvar approverList = CatUtil2.getHazmatApproverList(approverNames,r.getPartition());\r\n\t\tLog.javascript.debug(\"HAZMAT **** approverList: \" + approverList);\t\r\n\t\tif (approverList != null) {\t\r\n\t\t\tvar approvers = approverList.getApprovers();\r\n\t\t\tLog.javascript.debug(\"HAZMAT **** approvers: \" + approvers);\t\r\n\t\t\tif (approvers.size() > 0) {\r\n\t\t\t\tapprover = approverList;\r\n\t\t\t\tvar rulereason = Fmt.Sil(\"cat.rulereasons.vcsv2\", \"Hazmat\");\t\r\n\t\t\t\treason = Fmt.S(rulereason,shipto);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons.vcsv2\", reason);\r\n}\t\t\r\nhazmat_action;\r\n";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "/*  Adds Capital Approver for requisition containing capital based on \r\nAccounting Facility of Requester. Uses capitalReviewer condition. */\r\n\r\nfunction capitalApprover_condition (r)\r\n{\r\n\t\r\n\tLog.javascript.debug(\"CAPITAL APPROVER **** calling CapitalReviewer condition! \");\r\n\treturn capitalReviewer_condition(r);\r\n}\r\ncapitalApprover_condition;\r\n";
            Enabled = false;
            Name = "CapitalApprover (CAT)";
            Permission = RuleEditor;
            Result = "function capitalApprover_action (r)\r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_Capital\";\r\n\tvar required = false;\r\n\tvar afac = r.getRequester().getFieldValue(\"AccountingFacility\");\r\n\tvar partName = r.getPartition().getName();\r\n\tvar role = getCapitalRole(\"Capital Approver\", afac, partName);\r\n\tLog.javascript.debug(\"CAPITAL APPROVER **** role: \" + role);\r\n\tif (role != null) {\r\n\t\tapprover = role;\r\n\t\treason = \"Capital_Approver\";\r\n\t}\r\n\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons.vcsv2\", reason);\r\n}\t\t\r\ncapitalApprover_action; ";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "//* Adds BuyerCode representing highest amount on Req if threshold is exceeded */\r\n\r\nfunction buyerCode_condition (r) \r\n{\r\n    var result = false;\r\n    if (anyLineItems(r, IsAdHoc)) {\r\n    \tvar adhocTotal = getAdHocTotal(r.getLineItems());\r\n    \tLog.javascript.debug(\"BUYERCODE **** adhocTotal: \" + adhocTotal);\r\n\t\tvar bdThreshold = getBuyerCodeThreshold(\"Buyer\");\r\n\t\tif (bdThreshold != null) {\r\n\t\t\tLog.javascript.debug(\"BUYERCODE_CHAIN **** bdThreshold \" + bdThreshold);\r\n\t\t\tresult = adhocTotal.compareTo(bdThreshold) > 0;\t\t\r\n\t\t}\r\n\r\n    }\r\n    return result;\r\n}\r\nbuyerCode_condition;\r\n";
            Enabled = false;
            Name = "BuyerCode (CAT)";
            Permission = RuleEditor;
            Result = "function buyerCode_action (r) \r\n{\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_BuyerCode\"; \r\n\tvar required = true;\r\n\tvar lines = r.getLineItems();\r\n\tvar linecount = r.getLineItemsCount();\r\n\tvar bcarray = new Array(linecount);\r\n\tLog.javascript.debug(\"BUYER CODE **** bcarray: \" + bcarray);\r\n\tfor (i=0;i<linecount;i++) {\r\n\t\tbcarray[i] = new Array(2);\r\n\t\tvar line = lines.get(i);\r\n\t\tvar buyer = line.getFieldValue(\"BuyerCode\");\r\n\t\tbcarray[i][0] = null;\r\n\t\tbcarray[i][1] = line.getAmount();\r\n\t\tif (line.getIsAdHoc()) {\r\n\t\t\tbcarray[i][0] = buyer;\r\n\t\t}\t\r\n\t}\r\n\tLog.javascript.debug(\"BUYER CODE **** bcarray.length: \" + bcarray.length)\r\n\tif (bcarray.length > 0) {\r\n\t\tvar winner = CatDirectOrder.getWinningBuyer(bcarray);\r\n\t\tLog.javascript.debug(\"BUYER CODE **** winnerBC: \" + winner);\r\n\t\tif (winner != null) {\r\n\t\t\tvar bcPrefix = winner.getUniqueName().substring(0,2);\r\n\t\t\tLog.javascript.debug(\"BUYER CODE **** bcPrefix: \" + bcPrefix);\r\n\t\t\tvar row = Rules_BuyerCodeApproversTable(bcPrefix);\r\n\t\t\tif (!StringUtil.nullOrEmptyOrBlankString(row.get(0))) {\r\n\t\t\t\tvar principal = UniqueName2Principal(row.get(1),r.getPartition());\r\n\t\t\t\tif (principal != null) {\r\n\t\t\t\t\tapprover = principal;\r\n\t\t\t\t\treason = \"BuyerCode\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn ApprovalRequest.create(r, approver, required, \"cat.rulereasons.vcsv2\", reason);\r\n}\r\nbuyerCode_action;";
        }
    );
    Type = ariba.purchasing.core.Requisition;
}
