/*
    Copyright (c) 1996-2013 Ariba, Inc.
    All rights reserved. Patents pending.

    Rules file.

    Generated on Thu Sep 19 06:25:51 CDT 2013

    Do not edit this file!
*/
{
    Chains = (
        {
            Classname = "ariba.approvable.rules.JavaScriptChainRule";
            Condition = "function supervisorChain_condition (ir, ar)\r\n{\r\n    var type = ar.getType();\r\n    var approver = ar.getApprover();\r\n    Log.javascript.debug(\"=> In Supervisory Chain Rule... \");\r\n    Log.javascript.debug(\"SC approver: \" + approver.getUniqueName());\r\n    Log.javascript.debug(\"SC type: \" + type);\r\n    if ((isType(type,\"Supervisor\") || \r\n        isType(type,\"Supervisory Chain\")) && \r\n        (approver instanceof User)) {\r\n        var eac = approver.getFieldValue(\"ExpenseApprovalCode\");\r\n        Log.javascript.debug(\"SUPER_CHAIN ** approval code: \" + eac);\r\n        if (eac == null) {\r\n           return false;\r\n        }\r\n        var limit = getUserExpenseLimitBD(eac);\r\n        Log.javascript.debug(\"SUPER_CHAIN ** limit: \" + limit);\r\n        if (limit == null) {\r\n           return false;\r\n        }\r\n        var total = \r\n             CatMFGIRRulesUtil.getCumulativeAmount(ir, false);\r\n        Log.javascript.debug(\"SC limit/total: \" + limit + \" / \" + total);\r\n        var accumulatedTotalTax = \r\n              CatMFGIRRulesUtil.getCumulativeAmount(ir, true);\r\n        if (accumulatedTotalTax == null || accumulatedTotalTax == 0.0000000000) {\r\n            return false;\r\n        }\r\n        Log.javascript.debug(\"AccumulatedTax: \" + accumulatedTotalTax);\r\n        var totalInvoiceAmountLessTax = \r\n              total.subtract(accumulatedTotalTax);\r\n        Log.javascript.debug\r\n              (\"TotalLessTax: \" + totalInvoiceAmountLessTax);\r\n\r\n        if (limit.compareTo(totalInvoiceAmountLessTax) < 0) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\t\t\t\t\r\nsupervisorChain_condition;";
            Enabled = true;
            Name = "Supervisory Chain";
            Permission = RuleEditor;
            Result = "function supervisorChain_action (ir, ar)\r\n{\r\n   var approver = Role_DataMaintainer;\r\n   var reason = \"DataMaintainer_Supervisor\";\r\n   var required = true;\r\n   var supervisor = User2Supervisor(ar.getApprover());\r\n   if (supervisor instanceof User) {\r\n      Log.javascript.debug(\"SC supervisor: \" + supervisor);\r\n      approver = supervisor;\r\n      reason = \"Chain_Supervisor\";\r\n   }\r\n   return ApprovalRequest.create(ir,\r\n                                                approver,\r\n                                                required,\r\n                                                \"cat.rulereasons\",\r\n                                                reason);\r\n}\r\nsupervisorChain_action;";
        }
    );
    Classname = ariba.approvable.rules.RuleSet;
    Constraints = (
        {
            Classname = "ariba.approvable.rules.JavaScriptConstraint";
            Condition = "function supervisory_chain_constraint (left, right)\r\n{\r\n    var lt = left.getType();\r\n    var rt = right.getType();\r\n\r\n    if (isType(lt, \"Cat Exception Handler\") && \r\n        isType(rt, \"Supervisor\")) {\r\n        Log.javascript.debug(\"Cat Exception Handler / Supervisor\");\t\t\r\n        return true;\r\n    }\t\r\n    if (isType(lt, \"Supervisor\") && \r\n        isType(rt, \"Supervisory Chain\")) {\r\n        Log.javascript.debug(\"Supervisor / Supervisory Chain\");\t\t\r\n        return true;\r\n    }\t\t\r\n    if (isType(lt,\"Supervisory Chain\") && \r\n        isType(rt,\"Supervisory Chain\")) {\r\n        Log.javascript.debug(\"Supervisory Chain\");\r\n        return (User2Supervisor(left.getApprover()) == right.getApprover()); \r\n    }\t\r\n    return false;\r\n}\r\nsupervisory_chain_constraint;";
            Enabled = true;
            Name = "Supervisory Chain Constraint";
            Permission = RuleEditor;
        },
        {
            After = "Credit Invoice for Orders";
            Before = Supervisor;
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "Credit Invoice for Orders After Supervisor";
            Permission = RuleEditor;
        },
        {
            After = "Credit Invoice for MasterAgreements";
            Before = Supervisor;
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "Credit Invoice for MasterAgreements After Supervisor";
            Permission = RuleEditor;
        },
        {
            ApprovalRequestType = ErrorHandler;
            Classname = ariba.approvable.rules.LastConstraint;
            Enabled = true;
            Name = "ErrorHandler Last";
            Permission = RuleEditor;
        },
        {
            After = "Invoice Manager";
            Before = "Credit Invoice for Orders";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "Credit Invoice for Orders Before Invoice Manager";
            Permission = RuleEditor;
        },
        {
            After = "Invoice Manager";
            Before = "Credit Invoice for MasterAgreements";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "Credit Invoice for MasterAgreements Before Invoice Manager";
            Permission = RuleEditor;
        },
        {
            After = ErrorHandler;
            Before = "Invoice Manager";
            Classname = ariba.approvable.rules.BasicConstraint;
            Enabled = true;
            Name = "Invoice Manager Before ErrorHandler";
            Permission = RuleEditor;
        },
        {
            ApprovalRequestType = CapitalAccountant;
            Classname = ariba.approvable.rules.LastConstraint;
            Enabled = true;
            Name = CapitalAccountantLast;
            Permission = RuleEditor;
        }
    );
    Current = true;
    EditRule = "function edit_rule (user, a, fields, changes)\r\n{\r\nif (!fields.isEmpty()) {\r\n   var s = fields.size();\r\n   Log.javascript.debug\r\n           (\"Changed Field size:\" + s);\r\n   for (var i = 0 ; i < s; i++)\r\n   {\r\n       var theField = fields.get(i);\r\n       Log.javascript.debug\r\n           (\"Changed Field:\" + theField);\r\n       if (theField.equals(\"Order\") ||\r\n          theField.equals(\"MasterAgreement\")) {\r\n          return Approvable.EditRequiresResubmit;\r\n       }\r\n       if (theField.equals(\"Account\") || \r\n           theField.equals(\"CostCenter\") || \r\n           theField.equals(\"SubAccount\") || \r\n           theField.equals(\"Project\") || \r\n           theField.equals(\"Facility\")) { \r\n           return Approvable.EditRequiresResubmit;\r\n       }\r\n\t//if(theField.equals(\"IsMatched\"))\r\n     if(theField.equals(\"MatchTo\"))\r\n     {\r\n       return Approvable.EditRequiresResubmit;\r\n\r\n     }\r\n   }\r\n}\r\n\r\n if (!changes.isEmpty()) {\r\n      Log.customer.debug(\"EDIT IR CA Changes.size(): \" + changes.size());\r\n      var numOfElements = changes.size();\r\n      for (i = 1; i <= numOfElements; i++) {\r\n\t\tvar change = changes.get(numOfElements - i);\r\n\t\tLog.customer.debug(\"Change fields for  IR: \" + change); \t\t\t\r\n\t\tif (change.fieldName == \"State\") {\r\n\t\t   var state = change.element;\r\n\t\t   Log.customer.debug(\"action: \" + state );\r\n\t\t   if (state==16) {\r\n\t\t      Log.customer.debug(\"IR : EDIT Rule: Add the capital Reviwer\");\t\t\t\t\t\r\n\t\t      return Approvable.EditRequiresResubmit;\r\n                   }\r\n                 }\r\n      }\r\n}\r\n   return Approvable.EditAllowedWithoutEffects;  \r\n}\r\nedit_rule;";
    EditRulePermission = RuleEditor;
    EditRuleType = JavaScript;
    Edits = ( );
    Filters = (
        {
            Classname = "ariba.approvable.rules.JavaScriptFilterRule";
            Enabled = true;
            Filter = "function remove_duplicates (ir, ar, filtered) \r\n{ \r\n   var approver = ar.getApprover();\r\n    var artmp; \r\n\r\n     for (var i = 0, s = filtered.size(); i < s; i++)\r\n       {\r\n        artmp = filtered.get(i);\r\n           if (artmp.getApprover()==approver) \r\n              { \r\n                return ar; \r\n               } \r\n        }\r\n return null; \r\n}\r\nremove_duplicates;";
            Name = "Remove Duplicates";
            Permission = RuleEditor;
        }
    );
    LoadDB = true;
    Name = "CatMFG JavaScript InvoiceReconciliation Rules-NEW";
    Simples = (
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function baseobjectIR_condition (ir)\r\n{ \r\nreturn false;\r\n}\r\nbaseobjectIR_condition;\r\n\r\n//  DEFINITIONS\r\n\r\nvar ListUtil = ariba.util.core.ListUtil;\r\nvar StringUtil = ariba.util.core.StringUtil;\r\nvar BigDecimal = java.math.BigDecimal;\r\nvar Currency = ariba.basic.core.Currency;\r\nvar Base = ariba.base.core.Base;\r\nvar InvoiceException = ariba.invocing.core.InvoiceException;\r\nvar BaseId = ariba.base.core.BaseId;\r\nvar BaseObject = ariba.base.core.BaseObject;\r\nvar ValueSource = ariba.base.fields.ValueSource;\r\n\r\n//  VARIABLES \r\n\r\nvar Role_DataMaintainer = Role.getRole(\"Data Maintainer\");\r\nvar Rules_ApprovalLimitsTable = \r\n   MakeCSVTable(\"data/CATApprovalLimitsUK.csv\", ListUtil.list(\"\",\"0\",\"\"));\r\nvar ApprovalLimitsFile = \r\n   \"config/variants/vcsv2/data/CATApprovalLimits.csv\";\r\n\r\n//  FUNCTIONS \r\n\r\nfunction isType (type, name) \r\n{\r\n    return type.startsWith(name);\r\n}\r\n\r\nfunction getUserExpenseLimit (approvalcode)\r\n{\r\n   var value  = makeMoneyBase(0);\r\n   var row = Rules_ApprovalLimitsTable(approvalcode);\r\n   Log.javascript.debug(\"UserExpenseLimit **** row: \" + row);\r\n   if (!StringUtil.nullOrEmptyOrBlankString(row)) {\r\n      value = makeMoneyBase(parseInt(row.get(1)));\r\n   }\r\n   return value;\r\n}\r\n\r\nfunction getUserExpenseLimitBD (approvalcode)\r\n{\r\n   var result = null;\r\n   var row = Rules_ApprovalLimitsTable(approvalcode);\t\r\n   if (!StringUtil.nullOrEmptyOrBlankString(row.get(0))) {\t\r\n      var limitBD = new BigDecimal(row.get(1));\r\n      var currency = Currency.getCurrencyFromUniqueName(row.get(2));\r\n      Log.javascript.debug(\"limitBD/currency: \" + limitBD + currency);\r\n      if (limitBD != null && currency != null) {\r\n         var limit = new Money(limitBD, currency);\r\n         if (limit != null) {\r\n            result = limit.getApproxAmountInBaseCurrency();\r\n         }\r\n      }\r\n   }\r\n   return result;\r\n}\r\n";
            Enabled = true;
            Name = "BaseObject Functions For IR";
            Permission = RuleEditor;
            Result = "function baseobjectIR_action(r)\r\n{ \r\nreturn null;\r\n}\r\nbaseobjectIR_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function catexception_handler_condition (ir, exception)\r\n{\r\n\r\n    if (ir.getRequestedAction() == 2) {\r\n       //if requested action is to reject\r\n       return false;\r\n    }\r\n    if (!ir.getInvoice().getInvoicePurpose().equals(\"standard\")) {\r\n       return false;\r\n    }\r\n    if (ir.getInvoice().getInvoiceOperation().equals(\"delete\")) {\r\n       return false;\r\n    }\r\n\r\n    return true;\r\n\r\n}\r\ncatexception_handler_condition;";
            Enabled = true;
            FieldPath = AllUnreconciledExceptions.BaseId;
            Name = "Cat Exception Handler";
            Permission = RuleEditor;
            Result = "var CatMFGIRRulesUtil = config.java.invoicing.vcsv2.CatMFGIRApprovalRulesUtil;\r\nvar CatCSVIRRulesUtil = config.java.invoicing.vcsv1.CatCSVIRApprovalRulesUtil;\r\n\r\nfunction catexception_handler_action (ir, exceptionId)\r\n{\r\n\r\n   Log.javascript.debug(\"Exception is: \"+ exceptionId);\r\n   var exception = exceptionId.getLocal(ir);\r\n   Log.javascript.debug(\"Exception is: \"+ exception.getType().getUniqueName());\r\n   var approver = CatMFGIRRulesUtil.getExceptionHandler(exception);\r\n   Log.javascript.debug(\"Approver is: \"+approver );\r\n   var addDataMaintainer = CatCSVIRRulesUtil.validateExceptionHandler(approver,ir.getPartition());   \r\n    Log.javascript.debug(\"Add DataMaintainer ? \"+addDataMaintainer);\r\n\r\n    //then use the logic used in the java - checking active and inactive approver\r\n    \r\n    if (addDataMaintainer) {\r\n            \r\n            Log.javascript.debug(\" Inside IF :: approver is InActive \");\r\n            var uniqueName = approver.getUniqueName();\r\n            var name= approver.getName().getPrimaryString();\r\n            var rulesreason = \"Data Maintainer is added due to InActive approver \"+name+\" (\"+uniqueName+\")\"+\" who must approve this Invoice Reconciliation for \"+ exception.getType().getName().getPrimaryString();\r\n            approver = Role_DataMaintainer;\r\n            Log.javascript.debug(\" Inside IF :: approver=\"+approver );\r\n\r\n            return ApprovalRequest.create(ir,\r\n                                          approver,\r\n                                          true,\r\n                                          \"ruleReasons\",\r\n                                           rulesreason);\r\n    }\r\n   else{\r\n            Log.javascript.debug(\" inside else ::approver is Active\");\r\n\t\t    return ApprovalRequest.create(ir,\r\n                               \t\t\tapprover,\r\n                               \t\t\ttrue,\r\n\t             \t\t\t\t\t\t\"ruleReasons\",\r\n                              \t\t\t\"ExceptionHandlerMustApprove\");\r\n\t}\r\n}\r\ncatexception_handler_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "//27/07/2013  IBM Mounika K  Q4 2013-RSD 121-FDD 1.1/TDD 1 Implemented Geneva supervisor rule logic\r\n\r\nvar CatMFGIRRulesUtil = config.java.invoicing.vcsv2.CatMFGIRApprovalRulesUtil;\r\nvar tolerance = new Money(new BigDecimal(\"5.00\"),Currency.getBaseCurrency());\r\nfunction supervisor_condition (ir)\r\n{\r\n    if (!ir.getInvoice().getInvoicePurpose().equals(\"standard\")) {\r\n       return false;\r\n    }\r\n    if (ir.getInvoice().getInvoiceOperation().equals(\"delete\")) {\r\n       return false;\r\n    }\r\n    if (ir.getTotalCost().getSign() < 0) {\r\n       return false;\r\n    }\r\n    if (ir.getConsolidated()) {\r\n       return false;\r\n    }\r\n    if (ir.getRequestedAction() == 2) {\r\n       //if requested action is to reject\r\n       return false;\r\n    }\r\n    var requester = CatMFGIRRulesUtil.getRequester(ir);\r\n    if (!requester instanceof User) {\r\n       return false;\r\n    } \r\n    var eac = requester.getFieldValue(\"ExpenseApprovalCode\");\r\n    Log.javascript.debug(\"requester code: \" + eac);\r\n    if (eac == null) {\r\n       return false;\r\n    }\r\n\r\n    //Start : Q4 2013-RSD 121-FDD 1.1/TDD 1\r\n    var limit = getUserExpenseLimitGB(eac);\r\n    //End : Q4 2013-RSD 121-FDD 1.1/TDD 1\r\n\r\n    Log.javascript.debug(\"requester limit: \" + limit);\r\n    if (limit == null) {\r\n       return false;\r\n    }\r\n    var rlic = ir.getOrder();\t\r\n    if (rlic == null) {\r\n        rlic = ir.getMasterAgreement();\r\n    }\r\n    Log.javascript.debug(\"SC ::: PO/MA: \" + rlic);\r\n    if (rlic == null) {\r\n       return false;\r\n    }\r\n    var rlicTotalCost = rlic.getTotalCost();\r\n    if (rlicTotalCost == null || rlicTotalCost.getAmount() == 0.0000000000) {\r\n       //can be null for MA with no max limit\r\n       return false;\r\n    } else {\r\n\r\n        //Start : Q4 2013-RSD 121-FDD 1.1/TDD 1\r\n        var rlicCurrency = rlicTotalCost.getCurrency();\r\n        Log.javascript.debug(\"SC ::: rlicTotalCost (before tolerance): \" + rlicTotalCost);     \r\n        // add tolerance to negate currency conversion risk\r\n        rlicTotalCost = rlicTotalCost.add(tolerance);\r\n        Log.javascript.debug(\"SC ::: rlicTotalCost (after tolerance): \" + rlicTotalCost);         \r\n       \trlicTotalCost = rlicTotalCost.getAmount();\r\n    }\r\n    Log.javascript.debug(\"SC ::: Total Order/MA Cost: \" + rlicTotalCost);\r\n    var totalInvoiceAmount = CatMFGIRRulesUtil.getCumulativeAmount(ir, rlic, false, false);\r\n    if (totalInvoiceAmount == null || totalInvoiceAmount == 0.0000000000) {\r\n       return false;\r\n    }\r\n    Log.javascript.debug(\"SC ::: requester limit/invoice total: \" + limit + \" / \" + totalInvoiceAmount);\r\n\tvar accumulatedTotalTax = CatMFGIRRulesUtil.getCumulativeAmount(ir, rlic, true, false);\r\n    //if (accumulatedTotalTax == null ||accumulatedTotalTax == 0.0000000000) {\r\n    //   return false;\r\n    if (accumulatedTotalTax == null) {\r\n       accumulatedTotalTax = 0.0000000000;  \r\n    }\r\n    Log.javascript.debug(\"Accumulated Tax: \" + accumulatedTotalTax);\r\n    var totalInvoiceAmountLessTax = \r\n          totalInvoiceAmount.subtract(accumulatedTotalTax);\r\n    Log.javascript.debug(\"TotalInvoiceAmountLessTax: \" + totalInvoiceAmountLessTax);\r\n    if (totalInvoiceAmountLessTax.compareTo(rlicTotalCost) <= 0) {\r\n        return false;\r\n    }\r\n    // convert to currency of PO \r\n    //var limitMoney = new Money(limit,ariba.basic.core.Currency.getBaseCurrency());\t\t\t\t\t\t\t\r\n    Log.javascript.debug(\"SC ::: limitMoney: \" + limit);\r\n    if (limit == null) {\r\n\treturn false;\r\n    }\t\r\n    var limitMoneyConverted = limit.convertToCurrency(rlicCurrency);\r\n    Log.javascript.debug(\"SC ::: limitMoneyConverted: \" + limitMoneyConverted);\r\n    if (limitMoneyConverted == null) {\r\n\treturn false;\r\n    }\r\n    limit = limitMoneyConverted.getAmount();\r\n    //End : Q4 2013-RSD 121-FDD 1.1/TDD 1\r\n\r\n    Log.javascript.debug(\"SC ::: limit: \" + limit);    \r\n    if (limit.compareTo(totalInvoiceAmountLessTax) < 0) {\r\n        return true;\r\n    }\r\n  \r\n    return false;\r\n\r\n}\r\nsupervisor_condition;";
            Enabled = true;
            Name = Supervisor;
            Permission = RuleEditor;
            Result = "function supervisor_action (ir)\r\n{\r\n    Log.javascript.debug(\"in supervisor action...\");\r\n    var requester = CatMFGIRRulesUtil.getRequester(ir);\r\n    Log.javascript.debug(\"requester is: \" + requester);\r\n    var approver = Role_DataMaintainer;\r\n    var reason = \"DataMaintainer_Supervisor\";\r\n    var required = true;\r\n    var supervisor = User2Supervisor(requester);\r\n     if (supervisor instanceof User) {\r\n        Log.javascript.debug(\"requester's supervisor: \" + supervisor);\r\n        approver = supervisor;\r\n        reason = \"Chain_Supervisor\";\r\n     }\r\n\r\n     return ApprovalRequest.create(ir,\r\n                                                  approver,\r\n                                                  required,\r\n                                                  \"cat.rulereasons\",\r\n                                                  reason);\r\n\r\n}\r\nsupervisor_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function catrequester_for_credits_orders_condition (ir, order)\r\n{\r\n\r\n    if (order == null) {\r\n       return false;\r\n    }\r\n    if (!ir.getInvoice().getInvoicePurpose().equals(\"standard\")) {\r\n       return false;\r\n    }\r\n    if (ir.getInvoice().getInvoiceOperation().equals(\"delete\")) {\r\n       return false;\r\n    }\r\n    if (ir.getTotalCost().getSign() < 0) {\r\n       return true;\r\n    }\r\n    return false;\r\n\r\n}\r\ncatrequester_for_credits_orders_condition;";
            Enabled = true;
            FieldPath = Orders;
            Name = "Credit Invoice for Orders";
            Permission = RuleEditor;
            Result = "function catrequester_for_credits_orders_action (ir, order)\r\n{\r\n\r\n   Log.javascript.debug(\"Order is: \"+ order.getUniqueName());\r\n   var approver = \r\n         order.getLineItems().get(0).getRequisition().getRequester();\r\n\r\n   Log.javascript.debug(\"Approver is: \"+approver );\r\n\r\n    return ApprovalRequest.create(ir,\r\n                               approver,\r\n                               true,\r\n                               \"cat.ruleReasons2.nani\",\r\n                               \"RequesterForCreditInvoices\");\r\n}\r\ncatrequester_for_credits_orders_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSplitterRule";
            Condition = "function catrequester_for_credits_mas_condition (ir, ma)\r\n{\r\n\r\n    if (ma == null) {\r\n       return false;\r\n    }\r\n    if (!ir.getInvoice().getInvoicePurpose().equals(\"standard\")) {\r\n       return false;\r\n    }\r\n    if (ir.getInvoice().getInvoiceOperation().equals(\"delete\")) {\r\n       return false;\r\n    }\r\n    if (ir.getTotalCost().getSign() < 0) {\r\n       return true;\r\n    }\r\n    return false;\r\n\r\n}\r\ncatrequester_for_credits_mas_condition;";
            Enabled = true;
            FieldPath = MasterAgreements;
            Name = "Credit Invoice for MasterAgreements";
            Permission = RuleEditor;
            Result = "function catrequester_for_credits_mas_action (ir, ma)\r\n{\r\n\r\n   Log.javascript.debug(\"MA is: \"+ ma.getUniqueName());\r\n\r\n   var approver = ma.getRequester();\r\n\r\n   Log.javascript.debug(\"Approver is: \"+approver );\r\n\r\n    return ApprovalRequest.create(ir,\r\n                               approver,\r\n                               true,\r\n                               \"cat.ruleReasons2.nani\",\r\n                               \"RequesterForCreditInvoices\");\r\n}\r\ncatrequester_for_credits_mas_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function buyerCodeCheck_condition (ir)\r\n{\r\n    if (ir.getRequestedAction() == 2) {\r\n       //if requested action is to reject\r\n       return false;\r\n    }\r\n    if (!ir.getInvoice().getInvoicePurpose().equals(\"standard\")) {\r\n       return false;\r\n    }\r\n    if (ir.getInvoice().getInvoiceOperation().equals(\"delete\")) {\r\n       return false;\r\n    }\r\n\r\n    var irLineItems = ir.getLineItems();\r\n    Log.javascript.debug(\"buyerCodeCheck_condition Line Item Size :\"+irLineItems.size());\r\n    \r\n    for(var i = 0; i < irLineItems.size(); i++)\r\n    {\r\n        Log.javascript.debug(\"buyerCodeCheck_condition Line Item : \"+(i+1));\r\n        var irli = irLineItems.get(i);\r\nvar linetype1 = irli.getFieldValue(\"LineType\");\r\nif (linetype1 != null){\r\n        Log.javascript.debug(\"buyerCodeCheck_condition linetype1 : \"+linetype1);\r\nvar linetype = linetype1.getFieldValue(\"UniqueName\");\r\n     Log.javascript.debug(\"buyerCodeCheck_condition Line Item : \"+linetype); \r\nif((linetype.equals(\"_NonCatalogItem\")) || (linetype.equals(\"_PunchOutItem\")))\r\n{\r\n       Log.javascript.debug(\"buyerCodeCheck_condition Line Item : \"+linetype);        \r\nvar buyer = irli.getFieldValue(\"BuyerCode\");\r\n        if(buyer == null) {\r\n        \tLog.javascript.debug(\"buyerCodeCheck_condition Buyer Code is null on line item \"+(i+1));\r\n        \treturn true;\r\n        }\r\n    }\r\n    }\r\n}\r\n    return false;\r\n}\r\nbuyerCodeCheck_condition;";
            Enabled = false;
            Name = BuyerCodeCheck;
            Permission = RuleEditor;
            Result = "function buyerCodeCheck_action (ir)\r\n{\r\n   Log.javascript.debug(\"Entering buyerCodeCheck_action\");\r\n  var approver = Role.getRole(\"Transaction Center (mfg1)\");\r\n   Log.javascript.debug(\"buyerCodeCheck_action ::: Approver is: \" + approver.getName());\r\n   return ApprovalRequest.create(ir,\r\n                               approver,\r\n                               true,\r\n\t                 \t\t\t\"cat.rulereasons.vcsv2\",\r\n                               \"TransactionTeam_BuyerCode\");\r\n\t\r\n\t\r\n}\r\nbuyerCodeCheck_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "var CatMFGIRRulesUtil= config.java.invoicing.vcsv2.CatMFGIRApprovalRulesUtil;\r\nvar CatValidateAccountingString = config.java.action.vcsv2.CatValidateMFGAccounting;\r\n\r\nfunction errorHandler_condition (ir)\r\n{\r\n    if (ir.getRequestedAction() == 2) {\r\n       //if requested action is to reject\r\n       return false;\r\n    }\r\n    if (!ir.getInvoice().getInvoicePurpose().equals(\"standard\")) {\r\n       return false;\r\n    }\r\n    if (ir.getInvoice().getInvoiceOperation().equals(\"delete\")) {\r\n       return false;\r\n    }\r\n    if (ir.getInvoice().getLoadedFrom() != 3) {\r\n       //if not paper invoice\r\n       Log.javascript.debug(\"Not a paper invoice...\");\r\n       if (CatMFGIRRulesUtil.isTaxMismatch(ir)) return true;\r\n    }\r\n\r\n    var irLineItems = ir.getLineItems();\r\n    Log.javascript.debug(\"Line Item Size :\"+irLineItems.size());\r\n    \r\n    for(var i = 0; i < irLineItems.size(); i++)\r\n    {\r\n        Log.javascript.debug(\"Line Item : \"+(i+1));\r\n        var irli = irLineItems.get(i);\r\n        var sac = irli.getAccountings();\r\n        if (sac != null) {\r\n              var sacList = sac.getSplitAccountings();\r\n              Log.javascript.debug(\" Split Accounting Size :\"+sacList.size());\r\n              for (var j = 0; j < sacList.size(); j++) {\r\n                  Log.javascript.debug(\"Line Item \"+(i+1)+\" Split Accounting \"+(j+1));\r\n                  var sa = sacList.get(j);\r\n                  var response = CatValidateAccountingString.validateAccounting(sa);\r\n                  Log.javascript.debug(\"Response after validating Accounting \"+response);\r\n                  if (response != 0) return true;\r\n              }\r\n        }\r\n    }\r\n    \r\n    return false;\r\n}\r\nerrorHandler_condition;";
            Enabled = true;
            Name = ErrorHandler;
            Permission = RuleEditor;
            Result = "function errorHandler_action (ir)\r\n{\r\n   Log.javascript.debug(\"Entering errorHandler_action\");\r\n   var approver = Role.getRole(\"IR Error Handler (UK)\");\r\n   Log.javascript.debug(\"errorHandler ::: Approver is: \" + approver.getName());\r\n   return ApprovalRequest.create(ir,\r\n                               approver,\r\n                               true,\r\n\t                 \t\t\t\"cat.ruleReasons2.nani\",\r\n                               \"IR_Error_Handler\");\r\n}\r\nerrorHandler_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function invoicemanager_condition(approvable)\r\n{\r\n    if (approvable.getRequestedAction() == 2) \r\n    {\r\n       //if requested action is to reject\r\n       return false;\r\n    }\r\n   if ((\"Rejecting\".equals(approvable.getStatusString())) || (\"Rejected\".equals(approvable.getStatusString())))\r\n   {\r\n      return false;\r\n}\r\nif(approvable.getTotalCost().getAmount() < 0)\r\n{\r\nreturn false;\r\n}\r\nreturn false;\r\n}\r\n invoicemanager_condition;";
            Enabled = false;
            Name = "Invoice Manager";
            Permission = RuleEditor;
            Result = " function invoicemanager_action(r)\r\n {\r\n \r\n Log.javascript.debug(\"-Ve Dollar Invoice\");\r\n \r\n        var  Role_InvManager = Role.getRole(\"Invoice Manager\");\r\n Log.javascript.debug(\"Invoice Manager Role\" + Role_InvManager );\r\n var   approver = Role_InvManager;\r\n var required =true;\r\n var reason_inv = \"Invoice Manager has to Approve for Credit Invoices\";\r\n    return ApprovalRequest.create(r,\r\n                                   approver,\r\n                                   required,\r\n                                   \"reason_inv\",\"Invoice Manager has to Approve for Credit Invoices\");\r\n }\r\n  invoicemanager_action;";
        },
        {
            Classname = "ariba.approvable.rules.JavaScriptSimpleRule";
            Condition = "function CapitalAccountant_condition (ir, order)\r\n{\r\n  Log.javascript.debug(\"Capital Accountant Condition\");\r\n  var order = ir.getOrder();\r\n  var isCapital = false;\r\n  var isSplChrg = false;\r\n  var isMatchedToSplChr = false;\r\n  Log.javascript.debug(\"Order is: \"+ order);\r\n   if (order == null) {\r\n        return false;\r\n    }\r\n    Log.javascript.debug(\"Order is: \"+ order.getUniqueName());\r\n    var lines = ir.getLineItems();\r\n    var size = lines.size();\r\n     Log.javascript.debug(\"Order size  is: \"+ size );\r\n   while (size > 0) {\r\n     Log.javascript.debug(\"inside loop\" );\r\n     var rli = lines.get(size-1);\r\n     Log.javascript.debug(\"rli: \"+ rli );\r\n     var rliAccType = rli.getDottedFieldValue(\"AccountType.UniqueName\");\r\n\tLog.javascript.debug(\"acctype: \"+ rliAccType );\r\n    var rliAccDesc = rli.getDottedFieldValue(\"LineType.Name.PrimaryString\");\r\n        Log.javascript.debug(\"rliAccDesc: \"+ rliAccDesc );\r\n    var matchedToSplChr = rli.getDottedFieldValue(\"MatchTo.UniqueName\");\r\n        Log.javascript.debug(\"isMatchedToSplChr : \"+ matchedToSplChr  );\r\n    if((rliAccType!= null )&&(rliAccType==\"Capital\")) {\r\n          Log.javascript.debug(\"Order line is: Capital \" );\r\n         isCapital = true;\r\n     }\r\n     Log.javascript.debug(\"checking for splcharge\");\r\n     if((rliAccDesc!= null) &&(rliAccDesc==\"Special Charge\" )){\r\n          Log.javascript.debug(\"Order line is: Spl Charge \" );\r\n         isSplChrg = true;\r\n     }\r\n     Log.javascript.debug(\"checking for ManualMAtch\");\r\n     if((matchedToSplChr!= null) &&(matchedToSplChr==\r\n\"SpecialCharge\" )){\r\n          Log.javascript.debug(\"Order line is: Manually Matched to Spl Charge \" );\r\n         isMatchedToSplChr = true;\r\n     }\r\n\r\n      size = size-1;\r\n \r\n    }\r\n    if((isCapital == true )&& (isMatchedToSplChr == true))\r\n    {\r\n         return true;\r\n    }\r\n    if((isCapital == true )&& (isSplChrg == true))\r\n    {\r\n         return true;\r\n    }\r\n    \r\n    return false;\r\n}CapitalAccountant_condition ;";
            Enabled = true;
            Name = CapitalAccountant;
            Permission = RuleEditor;
            Result = "function CapitalAccountant__action(ir, order)\r\n { \r\n Log.javascript.debug(\"capital Accountant\");\r\n\tvar approver = Role_DataMaintainer;\r\n\tvar reason = \"DataMaintainer_Capital Reviewer (mfg1-DX)\";\r\n\tvar required =true;\r\n        var  Role_CapitalAcc = Role.getRole(\"Capital Reviewer (mfg1-DX)\");\r\n Log.javascript.debug(\"capital Accountant Role\" + Role_CapitalAcc );\r\n\tif (Role_CapitalAcc != null) {\r\n\t\tapprover = Role_CapitalAcc ;\r\n\t\treason = \"Capital Reviewer (mfg1-DX) has to Approve for capital  order's IR\";\r\n\t}\r\n\r\n    Log.javascript.debug(\"capital Role is added in Approval flow\"  );\r\n    return ApprovalRequest.create(ir,\r\n                                   approver,\r\n                                   required,\r\n                                   \"reason_acc\",reason);\r\n }\r\n CapitalAccountant__action;";
        }
    );
    Type = "ariba.invoicing.core.InvoiceReconciliation";
}
